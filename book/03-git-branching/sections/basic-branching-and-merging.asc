=== Einfaches Branching und Merging

Wir stellen nun ein einfaches Beispiel für das Branching und Merging anhand eines Workflows vor, den man in der Realität verwenden kann.
Es umfasst die folgenden Schritte:

. Man arbeitet an einer Website.
. Man erzeugt einen Branch für einen neuen Artikel, an dem man arbeitet.
. Man arbeitet in diesem Branch.

Zu diesem Zeitpunkt erhält man die Information, dass es ein kritisches
Problem gibt, welches einen Hotfix benötigt.
Man macht dann das Folgende:

. Man wechselt auf seinen Produktiv-Branch.
. Man erzeugt einen Branch, um den Hotfix hinzuzufügen.
. Nachdem man diesen getestet hat, merged man den Hotfix-Branch und in den Produktiv-Branch und pusht diesen
. Man wechselt wieder zurück auf den Artikel-Branch und setzt seine Arbeit fort.

[[_basic_branching]]
==== Einfaches Branching

(((branches, basic workflow)))
Nehmen wir zunächst an, dass man an seinem Projekt arbeitet und bereits einige Commits im `master`-Branch durchgeführt hat.

.Eine einfache Git-Historie
image::images/basic-branching-1.png[Eine einfache Git-Historie.]

Man hat sich dazu entschlossen, an Issue #53 des von seiner Firma verwendeten Issue-Tracking-Systems zu arbeiten.
Um einen neuen Branch zu erzeugen und gleichzeitig auf diesen zu wechseln, kann man den `git checkout`-Befehl mit dem Schalter `-b` benutzen:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Das ist die Kurzform von:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Einen neuen Branch-Zeiger erzeugen
image::images/basic-branching-2.png[Einen neuen Branch-Zeiger erzeugen.]

Man arbeitet an seiner Website und erstellt einige Commits.
Dadurch wird der `iss53`-Branch nach vorne bewegt, weil man diesen ausgecheckt hat (was bedeutet, dass sein `HEAD` darauf zeigt):

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

.Der `iss53`-Branch wurde nach vorne bewegt, da man daran gearbeitet hat.
image::images/basic-branching-3.png[Der `iss53`-Branch wurde nach vorne bewegt, da man daran gearbeitet hat.]

Nun erhält man den Anruf, dass etwas mit der Website nicht stimmt und man dieses Problem gleich beheben muss.
Bei Git muss man den Fix nicht zusammen mit seinen Änderungen aus `iss53` verteilen und man muss sich auch nicht darum bemühen, seine bisher gemachten Änderungen vor der Anwendung des Fixes auf das Produktivsystem wieder rückgängig zu machen.
Alles, was man tun muss, ist wieder auf den `master`-Branch zurück zu wechseln.

Bevor man dies jedoch tut, muss man beachten, dass Git einen Wechsel des Branches nicht zulässt, solange man noch bisher nicht committete Änderungen in seinem Arbeitsverzeichnis oder seiner Staging-Area hat.
Am besten hat man einen sauberen Arbeitszustand, wenn man einen Branch wechselt.
Es gibt Wege, wie man darum herum kommen kann (nämlich mithilfe von ``Stashing'' und ``Commit Amending''), die später in <<_git_stashing>> behandelt werden.
Jetzt wird jedoch zunächst vorausgesetzt, dass alle Änderungen committet wurden, so dass man zurück auf seinen `master`-Branch wechseln kann:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

Zum jetzigen Zeitpunkt befindet sich das Arbeitsverzeichnis in exakt demselben Zustand, in dem es sich befand, bevor man an Issue #53 begonnen hatte zu arbeiten und man kann sich ganz auf den Hotfix konzentrieren.
Man sollte sich an dieses wichtige Detail erinnern: Wenn man den Branch wechselt, setzt Git das Arbeitsverzeichnis in den Zustand zurück, den es beim letzten Commit in diesen Branch hatte.
Es werden Dateien automatisch hinzugefügt, entfernt und geändert, um die Arbeitskopie wieder so aussehen zu lassen, wie beim letzten Commit in sie.

Als Nächstes ist ein Hotfix anzuwenden.
Es soll ein `hotfix`-Branch erstellt werden, auf dem man arbeiten soll, bis die Arbeit erledigt wurde:

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

.Auf `master` basierender Hotfix-Branch
image::images/basic-branching-4.png[Auf `master` basierender Hotfix-Branch.]

Nun kann man seine Tests laufen lassen, sicherstellen, dass der Hotfix das gewünschte Ergebnis liefert, und schließlich den `hotfix`-Branch zurück in seinen `master`-Branch mergen, um ihn auf das Produktivsystem anzuwenden.
Man macht dies mit dem Befehl `git merge`:(((git commands, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Man beachte den Zusatz ``Fast-forward'' (von englisch _to fast-forward_, vorspulen) in diesem Merge.
Da der gemergte Commit `C4`, auf den mit dem Branch `hotfix` gezeigt wurde, unmittelbar vor dem Commit `C2` liegt, bewegt Git den Zeiger einfach weiter.
Anders formuliert: wenn man versucht, einen Commit mit einem anderen Commit zu mergen, welchen man durch Folgen der Historie des erstgenannten Commits erreichen kann, so vereinfacht Git den Vorgang, indem es den Zeiger nach vorne bewegt, da keine zu divergierenden Versionen existieren, die gemergt werden müssten – das nennt man ``fast-forward''.

Die Änderung befindet sich nun im Snapshot des Commits auf den mit dem `master`-Branch gezeigt wird, und man kann den Fix veröffentlichen.

.`master` wurde auf `hotfix` vorgespult
image::images/basic-branching-5.png[`master` wurde auf `hotfix` vorgespult.]

Nachdem der superwichtige Fix verteilt wurde, kann man wieder zurück zu der Arbeit wechseln, bei der man unterbrochen worden war.
Allerdings löscht man vorab noch den `hotfix`-Branch, da man diesen nicht länger benötigt – der `master`-Branch zeigt auf dieselbe Stelle.
Man kann ihn mit der Option `-d` des Befehls `git branch` löschen:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Nun kann man wieder zurück wechseln auf den Branch mit den unfertigen Änderungen für Issue #53 und dort weiterarbeiten.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Die Arbeit an `iss53` wird wieder aufgenommen
image::images/basic-branching-6.png[Die Arbeit an `iss53` wird wieder aufgenommen.]

Es ist an dieser Stelle erwähnenswert, dass die Änderungen aus dem `hotfix`-Branch noch nicht in den Dateien des Zweigs `iss53` enthalten sind.
Falls man diese dort einfügen muss, kann man den `master`-Branch in seinen `iss53`-Branch mergen, indem man `git merge master` ausführt; oder man wartet mit Einpflegen dieser Änderungen ab, bis man sich zu einem späteren Zeitpunkt dazu entschieden hat, den Branch `iss53` wieder mit `master` zu vereinen.

[[_basic_merging]]
==== Einfaches Merging

(((branches, merging)))(((merging)))
Angenommen, man hat schließlich entschieden, dass die Arbeiten an Issue #53 nun abgeschlossen sind und reif dafür, dass man sie nach `master` mergt.
Um dies zu tun, mergt man seinen `iss53`-Branch nach `master`, und zwar ziemlich genau so, wie man zuvor seinen `hotfix`-Branch gemergt hat.
Alles, was man dafür tun muss, ist den Branch auszuchecken, in welchen man hinein mergen möchte und anschließend den Befehl `git merge` auszuführen:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

Dies sieht nun etwas anders aus, als der `hotfix`-Merge, den man zuvor durchgeführt hatte.
In diesem Fall haben sich die Entwicklungszweige ab einem früheren Zeitpunkt abweichend voneinander entwickelt.
Da der Commit auf dem Zweig, auf dem man sich befindet, kein unmittelbarer Nachfahre des Commits auf dem Zweig ist, in den man mergen möchte, muss Git nun etwas mehr Aufwand betreiben.
In diesem Fall führt Git einen einfachen Drei-Wege-Merge durch, in dem es die beiden Snapshots auf die die jeweiligen Entwicklungszweigspitzen zeigen und den gemeinsamen Vorfahren der beiden heranzieht.

.Die drei Snapshots eines typischen Merges
image::images/basic-merging-1.png[Die drei Snapshots eines typischen Merges.]

Statt den Zeiger des Branches einfach nach vorne zu bewegen, erzeugt Git diesmal einen neuen Snapshot, der aus diesem Drei-Wege-Merge entstanden ist und erzeugt automatisch einen neuen Commit, der darauf verweist.
Dieser wird als Merge-Commit bezeichnet und ist besonders deshalb, weil er mehr als einen Elternteil hat.

.Ein Merge-Commit
image::images/basic-merging-2.png[Ein Merge-Commit.]



It's worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than older tools like CVS or Subversion (before version 1.5), where the developer doing the merge had to figure out the best merge base for themselves.
This makes merging a heck of a lot easier in Git than in these other systems.

Now that your work is merged in, you have no further need for the `iss53` branch.
You can close the ticket in your ticket-tracking system, and delete the branch:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Basic Merge Conflicts

(((merging, conflicts)))
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.
If your fix for issue #53 modified the same part of a file as the `hotfix` branch, you'll get a merge conflict that looks something like this:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git hasn't automatically created a new merge commit.
It has paused the process while you resolve the conflict.
If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
Your file contains a section that looks something like this:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
For instance, you might resolve this conflict by replacing the entire block with this:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

This resolution has a little of each section, and the `<<<<<<<`, `=======`, and `>>>>>>>` lines have been completely removed.
After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
Staging the file marks it as resolved in Git.

If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.

[NOTE]
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<_advanced_merging>>.
====

After you exit the merge tool, Git asks you if the merge was successful.
If you tell the script that it was, it stages the file to mark it as resolved for you.
You can run `git status` again to verify that all conflicts have been resolved:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
The commit message by default looks something like this:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

If you think it would be helpful to others looking at this merge in the future, you can modify this commit message with details about how you resolved the merge and explain why you did the changes you made if these are not obvious.
