[[_git_branches_overview]]
=== Branches in a Nutshell

Um wirklich zu verstehen, wie die Branching-Funktionalität in Git umgesetzt wird, muss man zunächst einen Schritt zurück gehen und untersuchen, wie Git seine Daten speichert.

Wie in Kapitel <<_getting_started#_getting_started>> bereits gesagt wurde, speichert Git Daten nicht als Change Set oder in Form dateibasierter Änderungen (Diffs), sondern als eine Reihe von Snapshots.

Wenn man einen Commit ausführt, speichert Git ein Commit-Objekt, das einen Zeiger auf den Snapshot mit dem gespeicherten Inhalt enthält.
Dieses Objekt enthält außerdem den Namen des Autors, dessen E-Mail-Adresse, eine Commit-Beschreibung, und Zeiger auf den oder die Commits, die dem aktuellen Commit als ``Parent'' oder ``Parents'' (von englisch _parents_, Eltern) unmittelbar vorausgegangen sind. Der initiale Commit besitzt keinen Parent, ein normaler Commit besitzt einen Parent, und Commits, die aus einem Merge von zwei oder mehreren Branches hervorgegangen sind, besitzen entsprechend mehrere Parents.

Um dies bildlich zu veranschaulichen, stelle man sich vor, man initialisiert ein Verzeichnis mit drei Dateien, staged und committet diese.
Beim Hinzufügen zur Staging-Area wird für jede Datei eine Prüfsumme berechnet (der in <<_getting_started#_getting_started>> erwähnte SHA-1-Hash), wird eine Version der Datei im Git-Repository gespeichert (Git bezeichnet diese als Blob), und wird die Prüfsumme zur Staging-Area hinzugefügt.

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

Erzeugt man dann einen Commit mittels `git commit`, erstellt Git eine Prüfsumme von jedem Unterverzeichnis (in diesem Fall nur vom Hauptverzeichnis des Projekts) und speichert diese ``Tree''-Objekte (von englisch _tree_, Baum) im Git-Repository.
Git erstellt dann weiter ein Commit-Objekt, welches sowohl die Metadaten enthält, als auch einen Zeiger auf den Verzeichnisbaum des Hauptverzeichnisses, damit dieser Snapshot bei Bedarf wiederhergestellt werden kann.(((git commands, commit)))

Das neue Git-Repository enthält nun fünf Objekte: einen Blob für die Inhalte jeder der drei Dateien, einen Tree, der die Inhalte des Verzeichnisses auflistet und angibt, welche Dateinamen als welcher Blob gespeichert sind, und einen Commit, der den Zeiger auf die Wurzel des Verzeichnisbaums und alle Metadaten des Commits enthält.

.Ein Commit und sein Tree
image::images/commit-and-tree.png[Ein Commit und sein Tree.]

Nimmt man nun Änderungen vor und committet erneut, speichert der nächste Commit einen Zeiger auf den Commit, der dem neuen unmittelbar vorausgegangen ist.

.Commits und ihre Parents
image::images/commits-and-parents.png[Commits und ihre Parents.]

Bei Git ist ein Branch ein leichtgewichtiger, beweglicher Zeiger auf einen dieser Commits.
Der standardmäßig vergebene Name für einen Branch in Git lautet `master`.
Beginnt man mit dem Erstellen von Commits, erhält man den `master`-Branch, der auf den zuletzt erstellten Commit zeigt.
Bei jedem Commit rückt dieser automatisch vor.

[NOTE]
====
Der ``master''-Branch ist kein besonderer Branch in Git.(((master)))
Er ist so gewöhnlich wie jeder andere Branch.
Der einzige Grund, weshalb nahezu jedes Repository einen besitzt, ist dass der `git init`-Befehl ihn standardmäßig erstellt und sich kaum jemand veranlasst sieht, den Namen zu ändern.
====

.Ein Branch und seine Commit-Historie
image::images/branch-and-history.png[Ein Branch und seine Commit-Historie.]

[[_create_new_branch]]
==== Einen neuen Branch erzeugen

(((branches, creating)))
Was passiert, wenn man einen neuen Branch erzeugt?
Es wird ein neuer Zeiger erzeugt, den man bewegen kann.
Angenommen, man erstellt einen neuen Branch mit dem Namen `testing`.
Man erreicht dies, indem man den `git branch`-Befehl ausführt:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Damit wird ein neuer Zeiger erstellt, der auf den selben Commit zeigt, auf dem man sich gerade befindet.

.Zwei Branches, die auf dieselbe Reihe Commits zeigen
image::images/two-branches.png[Zwei Branches, die auf dieselbe Reihe Commits zeigen.]

Woher weiß Git, auf welchem Branch man sich gerade befindet?
Es führt einen besonderen Zeiger mit dem Namen `HEAD`.
Es gilt zu beachten, dass dies sich stark von dem Konzept eines `HEAD` in anderen Versionsverwaltungssystemen unterscheidet, die man vielleicht schon kennt, wie z.B. Subversion oder CVS.
Bei Git handelt es sich dabei um einen Zeiger auf den lokalen Branch, auf dem man sich zurzeit befindet.
In diesem Fall befindet man sich immer noch auf `master`.
Der `git branch`-Befehl hat lediglich einen neuen Branch _erzeugt_ – er sorgte nicht dafür, dass man auf diesen wechselt.

.HEAD zeigt auf einen Branch
image::images/head-to-master.png[HEAD zeigt auf einen Branch.]

Man kann dies leicht erkennen, indem man einen einfachen `git log`-Befehl ausführt, der einem mitteilt, wohin die Branch-Zeiger zeigen.
Diese Option wird `--decorate` genannt.


[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project
----

Man sieht die Branches ``master'' und ``testing'', die sich beim Commit `f30ab` befinden.

[[_switching_branches]]
==== Branches wechseln

(((branches, switching)))
Um auf einen existierenden Branch zu wechseln, führt man den Befehl `git checkout` aus.(((git commands, checkout)))
Wir wechseln zum neu erstellten Branch `testing` wie folgt:

[source,console]
----
$ git checkout testing
----

Dadurch wurde `HEAD` verschoben und zeigt nun auf den Branch `testing`.

.HEAD zeigt auf den momentanen Branch
image::images/head-to-testing.png[HEAD zeigt auf den momentanen Branch.]

Was bringt dies zum Ausdruck?
Nun, erstellen wir zunächst einen neuen Commit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.Der HEAD-Branch bewegt sich vorwärts, wenn ein Commit erstellt wurde
image::images/advance-testing.png[Der HEAD-Branch bewegt sich vorwärts, wenn ein Commit erstellt wurde.]

Das Interessante daran ist, dass nun der Branch `testing` vorwärts bewegt wurde, der Branch `master` jedoch noch immer auf den Commit zeigt, auf dem man sich befand, als man `git checkout` ausgeführt hatte, um den Branch zu wechseln.
Es soll nun wieder zurück auf den Branch `master` gewechselt werden:

[source,console]
----
$ git checkout master
----

.HEAD bewegt sich, wenn man einen Checkout macht
image::images/checkout-master.png[HEAD bewegt sich, wenn man einen Checkout macht.]

Der Befehl hat zwei Dinge gemacht.
Er hat zum einen den HEAD-Zeiger zurückbewegt, so dass dieser wieder auf den `master`-Branch zeigt, und zum anderen hat er die Dateien im Arbeitsverzeichnis auf den Snapshot zurückgestellt, auf den `master` zeigt.
Dies bedeutet weiter, dass Änderungen, die von diesem Punkt aus gemacht werden, eine älteren Version des Projekts als Basis haben.
Im Grunde spult es die Arbeiten aus dem `testing`-Zweig zurück, so dass man eine andere (Entwicklungs-)Richtung einschlagen kann.

[NOTE]
.Das Wechseln von Branches ändert Dateien im Arbeitsverzeichnis
====
Es ist wichtig zu wissen, dass sich die Dateien im Arbeitsverzeichnis ändern, sobald man zwischen Entwicklungszweigen wechselt.
Wechselt man auf einen älteren Branch, so wird das Arbeitsverzeichnis in den Zustand zurückversetzt, den es beim letzten in diesem Branch erzeugten Commit hatte.
Falls Git diesen Vorgang nicht konfliktfrei durchführen kann, wird es Sie den Branch gar nicht wechseln lassen.
====

Machen wir einige weitere Änderungen und committen erneut:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Nun ist die Projekthistorie divergiert (see <<divergent_history>>).
Wir haben einen Branch erzeugt, sind zu diesem gewechselt, haben dann etwas darin geändert und sind schließlich wieder zurück zum Haupt-Branch gewechselt und haben dort etwas anderes geändert.
Die jeweiligen Änderungen befinden sich somit isoliert voneinander in getrennten Branches: man kann nun zwischen den Branches hin- und herwechseln, bis man die beiden Branches mergen möchte, sobald man seine Arbeiten beendet hat.
Und man hat all dies mit den einfachen Befehlen `branch`, `checkout`, und `commit` erledigt.

[[divergent_history]]
.Divergierende Historie
image::images/advance-master.png[Divergierende Historie.]

Man kann dies auch mit Hilfe des `git log`-Befehls betrachten.
Ruft man `git log --oneline --decorate --graph --all` auf, so wird die Historie aller Commits ausgegeben, die zeigt, wo sich die Branch-Zeiger befinden und wie die Historie auseinandergelaufen ist.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Da es sich bei einem Branch in Git um eine einfache Datei handelt, die den 40 Zeichen langen SHA-1-Hash des Commits enthält, auf den sie zeigt, sind Branches günstig herzustellen und zu löschen.
Einen neuen Branch anzulegen geht so schnell und einfach, wie 41 Bytes in eine Datei zu schreiben (40 Zeichen und eine neue Zeile).

Dies steht in scharfem Kontrast zur Branching-Funktionalität der meisten älteren Versionsverwaltungssysteme, bei denen ein Kopieren aller Projektdateien in ein zweites Verzeichnis stattfindet.
Das kann, je nachdem wie groß das Projekt ist, mehrere Sekunden oder sogar Minuten dauern, wohingegen der Vorgang in Git immer frei von Verzögerungen ist.
Auch geschieht das Erkennen einer geeigneten Basis für einen Merge automatisch und ist leicht umsetzbar, da die Parents bei jedem Commit aufgezeichnet werden.
Diese Eigenschaften sollen Entwickler dazu zu ermutigen, Branches häufig zu erstellen und zu nutzen.

Schauen wir uns an, weshalb man dies auch sollte.
