[[_git_branches_overview]]
=== Branches in a Nutshell

Um wirklich zu verstehen, wie die Branching-Funktionalität in Git umgesetzt wird, muss man zunächst einen Schritt zurück gehen und untersuchen, wie Git seine Daten speichert.

Wie in Kapitel <<_getting_started>> bereits gesagt wurde, speichert Git Daten nicht als eine Reihe dateibasierter Änderungen (Diffs), sondern als eine Reihe von Snapshots.

Wenn man einen Commit ausführt, speichert Git ein Commit-Objekt, das einen Zeiger auf den Snapshot mit dem gespeicherten Inhalt enthält.
Dieses Objekt enthält außerdem den Namen des Autors, dessen E-Mail-Adresse, eine Commit-Beschreibung, und Zeiger auf den oder die Commits, die dem aktuellen Commit als Eltern-Commits (englisch _parent_) unmittelbar vorausgegangen sind. Der initiale Commit besitzt keinen Parent, ein normaler Commit besitzt einen Parent, und Commits, die aus einem Merge von zwei oder mehreren Branches hervorgegangen sind, besitzen entsprechend mehrere Parents.

Um dies bildlich zu veranschaulichen, stelle man sich vor, man initialisiert ein Verzeichnis mit drei Dateien, staged und committet diese.
Beim Hinzufügen zur Staging-Area wird für jede Datei eine Prüfsumme berechnet (der in <<_getting_started>> erwähnte SHA-1-Hash), wird eine Version der Datei im Git-Repository gespeichert (Git bezeichnet diese als Blob), und wird die Prüfsumme zur Staging-Area hinzugefügt.

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

Erzeugt man dann einen Commit mittels `git commit`, erstellt Git eine Prüfsumme von jedem Unterverzeichnis (in diesem Fall nur vom Hauptverzeichnis des Projekts) und speichert diese sogenannten Tree-Objekte (englisch _tree_, Baum) im Git-Repository.
Git erstellt dann weiter ein Commit-Objekt, welches sowohl die Metadaten enthält, als auch einen Zeiger auf den Verzeichnisbaum des Hauptverzeichnisses, damit dieser Snapshot bei Bedarf wiederhergestellt werden kann.(((git commands, commit)))

Das neue Git-Repository enthält nun fünf Objekte: ein Blob 

Your Git repository now contains five objects: one blob for the contents of each of your three files, one tree that lists the contents of the directory and specifies which file names are stored as which blobs, and one commit with the pointer to that root tree and all the commit metadata.

.A commit and its tree
image::images/commit-and-tree.png[A commit and its tree.]

If you make some changes and commit again, the next commit stores a pointer to the commit that came immediately before it.

.Commits and their parents
image::images/commits-and-parents.png[Commits and their parents.]

A branch in Git is simply a lightweight movable pointer to one of these commits.
The default branch name in Git is `master`.
As you start making commits, you're given a `master` branch that points to the last commit you made.
Every time you commit, it moves forward automatically.

[NOTE]
====
The ``master'' branch in Git is not a special branch.(((master)))
It is exactly like any other branch.
The only reason nearly every repository has one is that the `git init` command creates it by default and most people don't bother to change it.
====

.A branch and its commit history
image::images/branch-and-history.png[A branch and its commit history.]

[[_create_new_branch]]
==== Creating a New Branch

(((branches, creating)))
What happens if you create a new branch?
Well, doing so creates a new pointer for you to move around.
Let's say you create a new branch called testing.
You do this with the `git branch` command:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

This creates a new pointer to the same commit you're currently on.

.Two branches pointing into the same series of commits
image::images/two-branches.png[Two branches pointing into the same series of commits.]

How does Git know what branch you're currently on?
It keeps a special pointer called `HEAD`.
Note that this is a lot different than the concept of `HEAD` in other VCSs you may be used to, such as Subversion or CVS.
In Git, this is a pointer to the local branch you're currently on.
In this case, you're still on `master`.
The `git branch` command only _created_ a new branch – it didn't switch to that branch.

.HEAD pointing to a branch
image::images/head-to-master.png[HEAD pointing to a branch.]

You can easily see this by running a simple `git log` command that shows you where the branch pointers are pointing.
This option is called `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project
----

You can see the ``master'' and ``testing'' branches that are right there next to the `f30ab` commit.

[[_switching_branches]]
==== Switching Branches

(((branches, switching)))
To switch to an existing branch, you run the `git checkout` command.(((git commands, checkout)))
Let's switch to the new `testing` branch:

[source,console]
----
$ git checkout testing
----

This moves `HEAD` to point to the `testing` branch.

.HEAD points to the current branch
image::images/head-to-testing.png[HEAD points to the current branch.]

What is the significance of that?
Well, let's do another commit:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.The HEAD branch moves forward when a commit is made
image::images/advance-testing.png[The HEAD branch moves forward when a commit is made.]

This is interesting, because now your `testing` branch has moved forward, but your `master` branch still points to the commit you were on when you ran `git checkout` to switch branches.
Let's switch back to the `master` branch:

[source,console]
----
$ git checkout master
----

.HEAD moves when you checkout
image::images/checkout-master.png[HEAD moves when you checkout.]

That command did two things.
It moved the HEAD pointer back to point to the `master` branch, and it reverted the files in your working directory back to the snapshot that `master` points to.
This also means the changes you make from this point forward will diverge from an older version of the project.
It essentially rewinds the work you've done in your `testing` branch so you can go in a different direction.

[NOTE]
.Switching branches changes files in your working directory
====
It's important to note that when you switch branches in Git, files in your working directory will change.
If you switch to an older branch, your working directory will be reverted to look like it did the last time you committed on that branch.
If Git cannot do it cleanly, it will not let you switch at all.
====

Let's make a few changes and commit again:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Now your project history has diverged (see <<divergent_history>>).
You created and switched to a branch, did some work on it, and then switched back to your main branch and did other work.
Both of those changes are isolated in separate branches: you can switch back and forth between the branches and merge them together when you're ready.
And you did all that with simple `branch`, `checkout`, and `commit` commands.

[[divergent_history]]
.Divergent history
image::images/advance-master.png[Divergent history.]

You can also see this easily with the `git log` command.
If you run `git log --oneline --decorate --graph --all` it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Because a branch in Git is actually a simple file that contains the 40 character SHA-1 checksum of the commit it points to, branches are cheap to create and destroy.
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).

This is in sharp contrast to the way most older VCS tools branch, which involves copying all of the project's files into a second directory.
This can take several seconds or even minutes, depending on the size of the project, whereas in Git the process is always instantaneous.
Also, because we're recording the parents when we commit, finding a proper merge base for merging is automatically done for us and is generally very easy to do.
These features help encourage developers to create and use branches often.

Let's see why you should do so.
