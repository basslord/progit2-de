=== Über Versionsverwaltung

(((versionsverwaltung)))
Was ist Versionsverwaltung und weshalb sollte es mich kümmern?
Versionsverwaltung ist ein System, das zur Erfassung von Änderungen an einer oder mehreren Dateien über einen zeitlichen Ablauf verwendet wird; es sorgt dafür, dass bestimmte Versionen dieser Dateien auch später abrufbar bleiben.
Für die Beispiele in diesem Buch werden Dateien bestehend aus Quellcode von Software für die Versionsverwaltung verwendet; es ist jedoch ohne Weiteres möglich, nahezu jede Art von computergespeicherter Datei dazu zu verwenden.

Für Grafik- oder Webdesigner, die jede Version eines Bildes oder eines Layouts behalten wollen (was sie mit hoher Wahrscheinlichkeit möchten), ist die Verwendung eines Versionsverwaltungssystems (englisch _Version Control System_, VCS) sehr ratsam.
Es ermöglicht die Wiederherstellung älterer Zustände einer Datei oder eines gesamten Projekts, die Protokollierung der Änderungen im Verlaufe der Zeit, die Identifizierung von Personen, die entweder durch Änderungen an bestehenden oder Hinzufügen von neuen Dateien möglicherweise Probleme verursacht haben und vieles mehr.
Allgemein versetzt einen die Verwendung eines VCS in die Lage, auf einfache Art und Weise Dateien wiederherzustellen, nachdem man Mist gebaut oder Dateien verloren hat.
All dies bekommt man für einen sehr geringen Mehraufwand.

==== Lokale Versionsverwaltungssysteme

(((versionsverwaltung,lokal)))
Für viele dürfte das Kopieren von Dateien in einen anderen Ordner (der vielleicht sogar mit einem Zeitstempel versehen ist, falls sie schlau sind) die Methode der Wahl bei der Versionsverwaltung sein.
Diese Herangehensweise ist sehr verbreitet, weil sie so einfach ist. Jedoch ist sie auch unglaublich fehleranfällig.
Man verwechselt leicht den Ordner, in dem man sich befindet und schreibt versehentlich in die falsche Datei oder kopiert Dateien, die man nicht kopieren wollte.

Um diese Probleme zu vermeiden, entwickelten Programmierer vor langer Zeit lokale Versionsverwaltungssysteme mit einer einfachen Datenbank, die alle Dateiänderungen protokollierten.

.Lokale Versionsverwaltung.
image::images/local.png[Local version control diagram]

Eines der populäreren Versionsverwaltungssysteme war RCS, das auch heute noch immer mit vielen Computern ausgeliefert wird.
Sogar das das Betriebssystem Mac OS X kennt den Befehl `rcs`, falls die Entwickler-Tools installiert sind.
Das Prinzip von RCS ist das Bereithalten von Patches (also der Unterschiede zwischen verschiedenen Versionen einer Datei) in einer in einem speziellen Dateiformat auf der Festplatte gespeicherten Datei; durch das Zusammenfügen der Patches kann RCS jede beliebige Datei in genau den Zustand versetzen, den sie an irgendeinem beliebigen Zeitpunkt ihrer Geschichte hatte.

==== Zentralisierte Versionsverwaltungssysteme

(((versionsverwaltung,zentralisiert)))
Die nächste große Herausforderung ist die Zusammenarbeit mit Programmierern auf anderen Systemen.
Um mit dieser Herausforderung umzugehen, entwickelte man zentralisierte Versionsverwaltungssysteme (englisch _Centralized Version Control System_, CVCS).
Diese Systeme (u.a. CVS, Subversion und Perforce), bestehen zum einen aus einem einzelnen Server, der alle versionierten Dateien enthält und zum anderen aus einer beliebigen Anzahl von Clients, die Dateien von diesem zentralen Ort abholen. (((CVS)))(((Subversion)))(((Perforce)))
Über viele Jahre hinweg stellte dies den Standard bei Versionsverwaltungssystemen dar.

.Zentralisierte Versionsverwaltung.
image::images/centralized.png[Centralized version control diagram]

Dieser Aufbau bietet viele Vorteile, besonders gegenüber lokalen Versionsverwaltungssystemen.
Zum Beispiel weiß jeder Beteiligte in einem gewissen Maß, was jeder andere im Projekt macht.
Administratoren verfügen über ein feingranulares Kontrollsystem, mit dem sie darüber bestimmen können, wer über welche Berechtigungen verfügt; außerdem ist es bei Weitem einfacher, ein CVCS zu administrieren, als lokale Datenbanken auf jedem Client zu verwalten.

Allerdings hat auch dieser Aufbau einige schwerwiegende Nachteile.
Der augenscheinlichste ist der "Single Point of Failure", den der zentralisierte Server darstellt.
Falls dieser Server eine Stunde lang ausfällt, dann kann während dieser Stunde niemand mit anderen zusammenarbeiten oder versionierte Änderungen an Dateien speichern, an denen man gerade arbeitet.
Bei einer Beschädigung der Festplatte auf welcher die zentrale Datenbank liegt, verliert man, falls man über keine Backups dieser verfügt, seine gesamte Arbeit - die gesamte Historie des Projekts, abgesehen von einzelnen Snapshots, die Mitarbeiter möglicherweise noch auf ihren lokalen Rechnern haben könnten.
Lokale Versionsverwaltungssysteme leiden unter dem gleichen Problem - verfügt man nur über einen einzigen Speicherort für die vollständige Historie eines Projekts, riskiert man den völligen Datenverlust.

==== Verteilte Versionsverwaltungssysteme

(((versionsverwaltung,verteilt)))
An dieser Stelle kommen dezentralisierte (verteilte) Versionsverwaltungssysteme (englisch _Distributed Version Control System_, DVCS) ins Spiel.
In einem verteilten Versionsverwaltungssystem (u.a. Git, Mercurial, Bazaar oder Darcs), erhalten Anwender nicht lediglich den letzten Snapshot der Dateien, sondern sie spiegeln das Repository vollständig.
Falls nun ein Server ausfällt, über den die Clientsysteme gearbeitet haben, ist es auf diese Weise möglich, dass jedes beliebige Repository eines Clients auf den Server zurückgespielt werden kann, um es wiederherzustellen.
Jeder Clone ist tatsächlich eine vollständige Sicherung sämtlicher Daten.

.Verteilte Versionsverwaltung.
image::images/distributed.png[Distributed version control diagram]

Darüber hinaus können viele dieser Systeme hervorragend mit verschiedenen entfernten Repositories umgehen, sodass man mit verschiedenen Gruppen gleichzeitig und doch auf unterschiedliche Art im selben Projekt zusammenarbeiten kann.
Es werden verschiedene Arten von Arbeitsabläufen (wie z.B. Hierarchien) möglich, die mit zentralisierten Systemen nicht möglich sind.
