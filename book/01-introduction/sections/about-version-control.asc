=== Über Versionsverwaltung

(((versionsverwaltung)))
Was ist Versionsverwaltung und weshalb sollte es dich kümmern?
Versionsverwaltung ist ein System, das zur Erfassung von Änderungen an einer oder mehreren Dateien über einen zeitlichen Ablauf verwendet wird; es sorgt dafür, dass bestimmte Versionen dieser Dateien auch später abrufbar bleiben.
Für die Beispiele in diesem Buch werden Dateien bestehend aus Quellcode von Software für die Versionsverwaltung verwendet; es ist jedoch ohne Weiteres möglich, nahezu jede Art von computergespeicherter Datei dazu zu verwenden.

Für Grafik- oder Webdesigner, die jede Version eines Bildes oder eines Layouts behalten wollen (was sie mit hoher Wahrscheinlichkeit möchten), ist die Verwendung eines Versionsverwaltungssystems (VCS - von Englisch: Version Control System) sehr ratsam.
Es ermöglicht die Wiederherstellung älterer Zustände einer Datei oder eines gesamten Projekts, die Protokollierung der Änderungen im Verlaufe der Zeit, die Identifizierung von Personen, die entweder durch Änderungen an bestehenden oder Hinzufügen von neuen Dateien möglicherweise Probleme verursacht haben und vieles mehr.
Allgemein versetzt einen die Verwendung eines VCS in die Lage, auf einfache Art und Weise Dateien wiederherzustellen, nachdem man Mist gebaut oder Dateien verloren hat.
All dies bekommt man für einen sehr geringen Mehraufwand.

==== Lokale Versionsverwaltungssysteme

(((versionsverwaltung,lokal)))
Für viele dürfte das Kopieren von Dateien in einen anderen Ordner (der vielleicht sogar mit einem Zeitstempel versehen ist, falls sie schlau sind) die Methode der Wahl bei der Versionsverwaltung sein.
Diese Herangehensweise ist sehr verbreitet, weil sie so einfach ist. Jedoch ist sie auch unglaublich fehleranfällig.
Man verwechselt leicht den Ordner, in dem man sich befindet und schreibt versehentlich in die falsche Datei oder kopiert Dateien, die man nicht kopieren wollte.

Um diese Probleme zu vermeiden, entwickelten Programmierer vor langer Zeit lokale Versionsverwaltungssysteme mit einer einfachen Datenbank, die alle Dateiänderungen protokollierten.

.Lokale Versionsverwaltung.
image::images/local.png[Local version control diagram]

Eines der populäreren Versionsverwaltungssysteme war RCS, das auch heute noch immer mit vielen Computern ausgeliefert wird.
Sogar das das Betriebssystem Mac OS X kennt den Befehl `rcs`, falls die Entwickler-Tools installiert sind.
Das Prinzip von RCS ist das Bereithalten von Patches (also der Unterschiede zwischen verschiedenen Versionen einer Datei) in einer in einem speziellen Dateiformat auf der Festplatte gespeicherten Datei; durch das Zusammenfügen der Patches kann RCS jede beliebige Datei in genau den Zustand versetzen, den sie an irgendeinem beliebigen Zeitpunkt ihrer Geschichte hatte.

==== Zentralisierte Versionsverwaltungssysteme

(((versionsverwaltung,zentralisiert)))
Die nächste große Herausforderung ist die Zusammenarbeit mit Programmierern auf anderen Systemen.
Um mit dieser Herausforderung umzugehen, entwickelte man zentralisierte Versionsverwaltungssysteme (CVCS - von Englisch: Centralized Version Control System).
Diese Systeme, zu denen u.a. CVS, Subversion und Perforce gehören, bestehen zum einen aus einem einzelnen Server, der alle versionierten Dateien enthält und zum anderen aus einer beliebigen Anzahl von Clients, die Dateien von diesem zentralen Ort abholen. (((CVS)))(((Subversion)))(((Perforce)))
Über viele Jahre hinweg stellte dies den Standard bei Versionsverwaltungssystemen dar.

.Zentralisierte Versionsverwaltung.
image::images/centralized.png[Centralized version control diagram]

This setup offers many advantages, especially over local VCSs.
For example, everyone knows to a certain degree what everyone else on the project is doing.
Administrators have fine-grained control over who can do what; and it's far easier to administer a CVCS than it is to deal with local databases on every client.

However, this setup also has some serious downsides.
The most obvious is the single point of failure that the centralized server represents.
If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they're working on.
If the hard disk the central database is on becomes corrupted, and proper backups haven't been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines.
Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.

==== Distributed Version Control Systems

(((version control,distributed)))
This is where Distributed Version Control Systems (DVCSs) step in.
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don't just check out the latest snapshot of the files: they fully mirror the repository.
Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it.
Every clone is really a full backup of all the data.

.Distributed version control.
image::images/distributed.png[Distributed version control diagram]

Furthermore, many of these systems deal pretty well with having several remote repositories they can work with, so you can collaborate with different groups of people in different ways simultaneously within the same project.
This allows you to set up several types of workflows that aren't possible in centralized systems, such as hierarchical models.
