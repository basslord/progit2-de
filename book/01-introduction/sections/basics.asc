=== Grundlagen von Git

Nun, was also ist Git in aller Kürze?
Es ist äußerst wichtig, den folgenden Abschnitt gut zu verinnerlichen. Denn wenn man verstanden hat, was Git ist und wie seine zugrunde liegenden Konzepte funktionieren, ist es sehr gut möglich, das einem die effektive Verwendung von Git sehr viel leichter fallen.

Während des Kennenlernens von Git sollte man versuchen, vorhandenes Wissen über andere Versionsverwaltungssysteme (wie Subversion oder Perforce) über Bord zu werfen; dies wird bei der Benutzung von Git helfen, leichte Verwirrungen zu vermeiden.
Auch wenn das Benutzerinterface recht ähnlich aussieht, unterscheidet Git sich sehr von diesen anderen Systemen, was das Speichern von Informationen betrifft und wie es diese sieht; diese Unterschiede zu verstehen, hilft bei der Vermeidung von Verwirrungen bei der Benutzung.(((Subversion)))(((Perforce)))

==== Snapshots, keine Diffs

Der Hauptunterschied zwischen Git und anderen Versionsverwaltungssystemen (einschließlich Subversion und vergleichbaren Systemen) besteht in der Art und Weise, wie Git Daten betrachtet.
Die meisten anderen Systeme speichern Informationen als eine Liste von dateibasierten Änderungen (Diffs genannt).
Diese Systeme (CVS, Subversion, Perforce, Bazaar usw.) betrachten die Informationen, die sie verwalten, als eine Menge von Dateien und die Änderungen, die über die Zeit hinweg an einzelnen Dateien vorgenommen werden.

.Daten als Änderungen zu einer Basisversion einer Datei.
image::images/deltas.png[Daten als Änderungen zu einer Basisversion einer Datei.]

Git sieht und speichert Daten nicht auf diese Weise.
Stattdessen betrachtet Git seine Daten eher als eine Reihe von Snapshots eines Mini-Dateisystems.
Bei jedem Commit in Git (also der Speicherung des gegenwärtigen Status deines Projekts), sichert Git den Zustand sämtlicher Dateien in diesem Moment als Snapshot und speichert eine Referenz auf diesen.
Um effizient zu sein, kopiert Git unveränderte Dateien nicht, sondern legt lediglich eine Verknüpfung zu der vorherigen Version der Datei an.
Git betrachtet Daten also eher wie einen *Stream aus Snapshots*.

.Daten als Snapshots des Projekts über die Zeit.
image::images/snapshots.png[Git speichert Daten als Snapshots des Projekts über die Zeit.]

Dies ist ein wichtiger Unterschied zwischen Git und praktisch allen anderen Versionsverwaltungssystemen.
In Git wurden daher fast alle Aspekte der Versionsverwaltung neu überdacht, die andere Systeme mehr oder weniger von ihren jeweiligen Vorgängergenerationen übernommen haben.
Dies macht Git eher zu einem Mini-Dateisystem (das mit einigen unglaublich mächtigen Werkezeugen ausgerüstetet ist), als zu einem gängigen Versionsverwaltungssystem.
Auf einige der Vorteile, die es mit sich bringt, Daten in dieser Weise zu betrachten, werden wir in <<_git_branching>> eingehen, wenn wir das Git Branching Konzept diskutieren.

==== Beinahe jede Operation ist lokal


Most operations in Git only need local files and resources to operate – generally no information is needed from another computer on your network.
If you're used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers.
Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.

For example, to browse the history of the project, Git doesn't need to go out to the server to get the history and display it for you – it simply reads it directly from your local database.
This means you see the project history almost instantly.
If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local difference calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally.

This also means that there is very little you can't do if you're offline or off VPN.
If you get on an airplane or a train and want to do a little work, you can commit happily until you get to a network connection to upload.
If you go home and can't get your VPN client working properly, you can still work.
In many other systems, doing so is either impossible or painful.
In Perforce, for example, you can't do much when you aren't connected to the server; and in Subversion and CVS, you can edit files, but you can't commit changes to your database (because your database is offline).
This may not seem like a huge deal, but you may be surprised what a big difference it can make.

==== Git Has Integrity

Everything in Git is check-summed before it is stored and is then referred to by that checksum.
This means it's impossible to change the contents of any file or directory without Git knowing about it.
This functionality is built into Git at the lowest levels and is integral to its philosophy.
You can't lose information in transit or get file corruption without Git being able to detect it.

The mechanism that Git uses for this checksumming is called a SHA-1 hash.(((SHA-1)))
This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git.
A SHA-1 hash looks something like this:

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

You will see these hash values all over the place in Git because it uses them so much.
In fact, Git stores everything in its database not by file name but by the hash value of its contents.

==== Git Generally Only Adds Data

When you do actions in Git, nearly all of them only add data to the Git database.
It is hard to get the system to do anything that is not undoable or to make it erase data in any way.
As in any VCS, you can lose or mess up changes you haven't committed yet; but after you commit a snapshot into Git, it is very difficult to lose, especially if you regularly push your database to another repository.

This makes using Git a joy because we know we can experiment without the danger of severely screwing things up.
For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see <<_undoing>>.

==== The Three States

Now, pay attention.
This is the main thing to remember about Git if you want the rest of your learning process to go smoothly.
Git has three main states that your files can reside in: committed, modified, and staged.
Committed means that the data is safely stored in your local database.
Modified means that you have changed the file but have not committed it to your database yet.
Staged means that you have marked a modified file in its current version to go into your next commit snapshot.

This leads us to the three main sections of a Git project: the Git directory, the working tree, and the staging area.

.Working tree, staging area, and Git directory.
image::images/areas.png["Working tree, staging area, and Git directory."]

The Git directory is where Git stores the metadata and object database for your project.
This is the most important part of Git, and it is what is copied when you clone a repository from another computer.

The working tree is a single checkout of one version of the project.
These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit.
It's sometimes referred to as the ``index'', but it's also common to refer to it as the staging area.

The basic Git workflow goes something like this:

1. You modify files in your working tree.
2. You stage the files, adding snapshots of them to your staging area.
3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

If a particular version of a file is in the Git directory, it's considered committed.
If it has been modified and was added to the staging area, it is staged.
And if it was changed since it was checked out but has not been staged, it is modified.
In <<_git_basics_chapter>>, you'll learn more about these states and how you can either take advantage of them or skip the staged part entirely.
