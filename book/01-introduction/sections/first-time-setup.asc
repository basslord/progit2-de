[[_first_time]]
=== Erstmalige Git-Konfiguration

Da man Git nun auf seinem System installiert hat, sollte man seine Git-Umgebung anpassen.
Diese Konfiguration muss man nur einmal auf jedem Rechner durchführen; sie bleibt auch nach Upgrades bestehen.
Man kann sie jederzeit ändern, indem man die folgenden Befehle einfach noch einmal ausführt.

Git enthält ein Werkzeug namens `git config`, mit dem man sämtliche Konfigurationswerte auslesen und verändern kann, die das Aussehen und das Verhalten von Git steuern.(((git commands, config)))
Diese Werte können in Dateien an drei verschiedenen Orten gespeichert sein:

1. `/etc/gitconfig`: Enthält Konfigurationswerte, die auf alle Anwender des Systems und all ihre Repositories angewendet werden.
  Wenn `git config` mit der Option `--system` aufgerufen wird, wird diese Datei verwendet.
  (Da dies eine Systemkonfigurationsdatei ist, benötigt man Administrator- oder Superuser-Rechte, um Änderungen daran vornehmen zu können.)
2. `~/.gitconfig` oder `~/.config/git/config`: Enthält Konfigurationswerte für seinen eigenen Benutzer.
  Änderungen an ihr erfolgen durch die Optionsangabe `--global`.
3. `config` im Git-Verzeichnis (also unter `.git/config`): Enthält Konfigurationswerte für das jeweilige Repository.

Diese Liste besitzt eine Hierarchie, was bedeutet, dass jede vorangegangene Konfigurationsdatei mit den Werten der nachfolgenden überschrieben wird. Also werden beispielsweise Werte aus `/etc/gitconfig` überschrieben mit Werten aus `.git/config`.

Unter Windows sucht Git nach der Datei `.gitconfig` im `$HOME`-Verzeichnis (bei den meisten ist es das Verzeichnis `C:\Dokumente und Einstellungen\$USER`).
Ebenso wird nach `/etc/gitconfig` gesucht; diese Angabe ist jedoch relativ zum MSys-Wurzelverzeichnis zu verstehen, welches dasjenige ist, wohin Git installiert wurde.

Falls man Git für Windows in Version 2.0 oder neuer nutzt, existiert zusätzlich eine System-Level-Konfigurationsdatei unter `C:\Dokumente und Einstellungen\All Users\Application Data\Git\config` in Windows XP, oder unter `C:\ProgramData\Git\config` in Windows Vista und neuer.
Diese Konfigurationsdatei kann mit dem Befehl `git config -f <file>` nur von einem Administrator geändert werden.

==== Die eigene Identität

Als allererstes sollte man seinen Benutzernamen und seine E-Mail-Adresse angeben, wenn man Git installiert hat.
Dies ist deshalb wichtig, weil diese Angaben bei jedem getätigten Commit gelesen und unveränderlich in diesem Commit enthalten sein werden.

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Noch einmal zur Erinnerung: Die Einrichtung muss nur einmalig erledigt werden, wenn man sie mit der Option `--global` ausgeführt hat. Git wird diese Angaben auf dem jeweiligen System für alle seine Operationen nutzen.
Möchte man abweichende Angaben für Name und E-Mail-Adresse bei spezifischen Projekten machen, kann man die Befehle ohne die Option `--global` ausführen; man muss sich jedoch dazu auch in diesem Projekt befinden.

Viele Git-Werkzeuge mit grafischer Benutzeroberfläche helfen einem bei der Einrichtung, wenn man sie erstmalig startet.

==== Der eigene Editor

Nachdem man Git die eigene Identität bekannt gemacht hat, kann man seinen bevorzugten Texteditor auswählen, den Git benutzen soll, wenn eine Nachricht eingegeben werden muss.
Falls keine Auswahl stattfindet, nutzt Git den Standard-Editor des Betriebssystems.

Möchte man einen anderen Texteditor nutzen, wie zum Beispiel Emacs, so kann man den folgenden Befehl ausführen:

[source,console]
----
$ git config --global core.editor emacs
----

Unter Windows muss man den vollständigen Pfad zur ausführbaren Datei angeben, will man einen anderen Texteditor nutzen.
Dies könnte problematisch sein, je nachdem, wie der gewünschte Texteditor paketiert wurde.

Im Falle von Notepad++, einem populären Programmier-Editor, ist es wahrscheinlich, dass man die 32-Bit-Version nutzen möchte, da zum Zeitpunkt als diese Buch geschrieben wurde, die 64-Bit-Version nicht alle Plugins unterstützte.
Befindet man sich unter einem 32-Bit-System, oder verfügt man über einen 64-Bit-Editor auf einem 64-Bit-System, kann man den folgenden Befehl ausführen:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession"
----

Bei Verwendung eines 32-Bit-Editors auf einem 64-Bit-System, wird das Programm nach `C:\Program Files (x86)` installiert:

[source,console]
----
$ git config --global core.editor "'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession"
----

[NOTE]
====
Vim, Emacs and Notepad++ sind populäre Texteditoren, die häufig von Entwicklern unter Unix-basierten Systemen wie Linux und macOS oder unter Windows verwendet werden.
Ist man mit diesen nicht vertraut und bevorzugt daher einen eigenen Editor, muss man ggf. nach spezifischen Anleitungen suchen, wie man diesen in Git einrichten kann.
====

[WARNING]
====
Wenn man seinen Texteditor nicht wie beschrieben einrichtet, kann es passieren, dass es zu instabilen Programmzuständen kommt, sobald Git versucht, diesen zu starten.
Ein Beispiel unter Windows könnte eine vorzeitig beendete Git-Operation bei einer durch Git initiierten Änderung sein.
====

==== Überprüfen der Einstellungen

Möchte man die an den Konfigurationen vorgenommenen Einstellungen überprüfen, ruft man den Befehl `git config --list` auf, um alle Einstellungen aufzulisten, die Git zu diesem Zeitpunkt finden kann:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Tauchen hierbei einige Schlüssel öfter als einmal auf, liegt dies daran, dass Git den gleichen Schlüssel aus unterschiedlichen Dateien liest (z.B. aus `/etc/gitconfig` und `~/.gitconfig`).
In diesem Fall wird der letzte Wert genutzt, den Git ausgelesen hat.

Es ist ebenfalls möglich, den Wert eines spezifischen Schlüssels anzeigen zu lassen, indem man den Befehl `git config <key>` ausführt:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Da Git die Werte für die gleichnamige Konfigurationsvariablen aus mehr als einer Datei auslesen kann, ist es möglich, dass man einen unerwarteten Wert für eine solche Variable vorfindet und man nicht weiß, woher dieser kommt.
In diesen Fällen kann man Git als _origin_ für diesen Wert befragen und es wird Ihnen mitteilen, welche Konfigurationsdatei das letzte Sagen hat für diesen Wert:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
