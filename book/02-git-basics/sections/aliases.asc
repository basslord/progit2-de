[[_git_aliases]]
=== Aliasse in Git

(((aliases)))
Bevor das Kapitel über die Grundlagen von Git beendet wird, gibt es noch einen Tipp, wie man mit Git noch einfacher, bequemer und vertrauter arbeiten kann: Aliasse.
Es wird im weiteren Verlauf des Buchs nicht auf sie verwiesen werden und es wird ebenso wenig davon ausgegangen, dass man den Umgang mit ihnen geübt hat. Doch sollte man durchaus einmal gesehen haben, wie man sie nutzen kann.

Git wird Befehle nicht automatisch ergänzen, wenn man sie nur zum Teil eintippt.
Möchte man auf das vollständige Eingeben der Befehle verzichten, so kann man mit Hilfe von `git config` einfach einen Alias für sie einrichten.(((git commands, config)))
Es folgen ein paar Beispiele, die man vielleicht gerne einrichten mag:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Dies sorgt dafür, dass man statt `git commit` nur noch `git ci` eingeben muss.
Später werden möglicherweise noch weitere Befehle hinzukommen, je länger man mit Git arbeitet; man sollte dann nicht zögern, die Liste der Aliasse zu erweitern.

Mit Hilfe dieser Technik ist es auch möglich, Befehle zu erfinden, von denen man denkt, es sollte sie bereits geben.
Um zum Beispiel die Benutzerfreundlichkeit beim Entfernen von Dateien aus der Staging-Area zu erhöhen, könnte man einen eigenen "unstage"-Alias zu Git hinzufügen:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Damit sind die beiden folgenden Befehle äquivalent:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

Das erscheint doch gleich viel klarer.
Es ist auch verbreitet, einen `last`-Befehl hinzuzufügen:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Damit lässt sich der letzte Commit sehr einfach anzeigen:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Wie man sehen konnte, ersetzt Git ganz einfach den neuen Befehl durch den wie auch immer belegten Alias.
Es ist zudem möglich, einen externen Befehl auszuführen statt eines Git-Unterbefehls.
Für diesen Fall stellt man dem Befehl ein `!` voran.
Dies kann bei der Verwendung von eigenen Programmen hilfreich sein, die mit einem Git-Repository arbeiten.
Im folgenden Beispiel wird der Alias `git visual` dazu verwendet, das Programm `gitk` aufzurufen:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
