[[_viewing_history]]
=== Die Commit-Historie betrachten

Nachdem man selbst einige Commits getätigt, oder falls man ein Repository mit bereits existierender Commit-Historie geklont hat, möchte man vielleicht einen Blick zurück werfen auf das, was bisher geschah.
Der grundlegendste und mächtigste Befehl, um dies zu tun, ist `git log`.

Die folgenden Beispiele verwenden ein sehr einfaches Projekt namens ``simplegit''.
Um das Projekt zu erhalten, führt man den folgenden Befehl aus:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

FÜhrt man in diesem Projekt `git log` aus, sollte man eine Ausgabe ähnlich der Folgenden sehen:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Die Standardausgabe des `git log`-Befehls ohne zusätzliche Argumente listet die bisher in diesem Repository erstellten Commits in umgekehrter chronologischer Reihenfolge auf – das bedeutet, dass die neuesten Commits oben stehen.
Wie man sehen kann, wird jeder Commit mit seiner SHA-1-Prüfsumme, dem Namen und der E-Mail-Adresse seines Autors, dem Zeitpunkt seiner Erstellung und seiner Commit-Beschreibung aufgelistet.

Der `git log`-Befehl verfügt über eine riesige Anzahl von vielfältigen Optionen, um genau das anzuzeigen, wonach man sucht.
Im Folgenden werden einige der gebräuchlichsten gezeigt.

Eine der nützlicheren Optionen ist `-p` oder `--patch`, womit man die mit jedem Commit hinzugekommenen Unterschiede (die Ausgabe von _patch_) anzeigen lassen kann.
Zusätzlich kann man die Anzahl der anzuzeigenden Log-Ausgaben begrenzen, indem man z.B. `-2` als Option setzt, um lediglich die letzten zwei Ausgaben angezeigt zu bekommen.

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
----

Mit dieser Option werden dieselben Einträge angezeigt, doch befindet sich zusätzlich noch ein Diff unmittelbar nach jedem Eintrag.
Das ist sehr nützlich bei einer Code-Überprüfung oder um einen schnellen Überblick darüber zu bekommen, was in einer Reihe von Commits passiert ist, die ein Mitarbeiter hinzugefügt hat.
Weiter verfügt `git log` auch über eine Reihe von zusammenfassenden Optionen.
Wenn man zum Beispiel einige abgekürzte Statistiken sehen möchte, kann man die Option `--stat` benutzen:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Wie man sieht, erzeugt die `--stat`-Option unter jedem Commit-Eintrag eine Liste der geänderten Dateien, wie viele Dateien geändert wurden und wie viele Zeilen in diesen Dateien hinzugefügt und entfernt wurden.
Auch wird eine Zusammenfassung der Informationen am Ende hinzugefügt.

Eine weitere wirklich nützliche Option ist `--pretty`.
Diese Option ändert das standardmäßige Ausgabeformat zu weiteren verfügbaren Formaten.
Es gibt einige vorgefertigte Optionen, die man angeben kann.
Die Option `oneline` listet jeden Commit in einer einzigen Zeile, was hilfreich sein kann, wenn man viele Commits betrachtet.
Ergänzend zeigen die Optionen `short`, `full` und `fuller` die Ausgabe im annähernd gleichen Format, jedoch mit weniger, bzw. mehr Informationen:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Die interessanteste Option ist `format`, die es dem Nutzer erlaubt, sein eigenes Ausgabeformat zu bestimmen.
Das ist besonders dann hilfreich, wenn man eine Ausgabe erstellen möchte, die maschinenlesbar sein soll – da man das Format explizit festlegt, kann man sicher sein, dass es sich nicht durch Git-Updates verändern wird:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

In <<pretty_format>> sind einige der nützlichsten Optionen aufgelistet, die `format` entgegen nimmt.

[[pretty_format]]
.Nützliche Optionen für `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Option   | Beschreibung
| `%H`     | Commit-Hash
| `%h`     | Abgekürzter Commit-Hash
| `%T`     | Baum-Hash
| `%t`     | Abgekürzter Baum-Hash
| `%P`     | Eltern-Hashes
| `%p`     | Abgekürzte Eltern-Hashes
| `%an`    | Name des Autors
| `%ae`    | E-Mail-Adresse des Autors
| `%ad`    | Zeitangabe Autor (format akzeptiert die --date=option)
| `%ar`    | Zeitangabe Autor, relativ
| `%cn`    | Name des Committers
| `%ce`    | E-Mail-Adresse des Committers
| `%cd`    | Zeitangabe Committer
| `%cr`    | Zeitangabe Committer, relativ
| `%s`     | Betreff
|================================

Man mag sich fragen, was der Unterschied ist zwischen _Autor_ und _Committer_.
Der Autor ist der eigentliche Urheber einer Änderung, wohingegen der Committer derjenige ist, der die Änderung zuletzt committet hat.
Wenn man also einen Patch an ein Projekt sendet und ein verantwortliches Projektmitglied diesen einpflegt, werden beide Namen genannt – man selbst als der Autor und das Projektmitglied als Committer.
Diese Unterscheidung wird ein wenig genauer in <<_distributed_git>> betrachtet werden.

Die Optionen `oneline` und `format` sind besonders in Verbindung mit einer weiteren `log`-Option besonders nützlich: `--graph`.
Mit dieser Option wird der Ausgabe ein nettes, kleines ASCII-Diagramm hinzugefügt, das die Branch- und Merge-Historie anzeigt:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Diese Art der Ausgabe wird interessant, sobald die Themen Branching und Merging im folgenden Kapitel behandelt werden.

Dies waren lediglich einige einfache `git log`-Optionen für die Ausgabeformatierung – es gibt viele weitere.
<<log_options>> zeigt zusammen mit jeweils einer Anleitung sowohl die Optionen, die bisher besprochen wurden, als auch einige weitere übliche Formatierungsoptionen, die hilfreich sein könnten.

[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Beschreibung
| `-p`              | Zeige den hinzugefügten Patch für jeden Commit.
| `--stat`          | Zeige Statistiken geänderter Dateien für jeden Commit.
| `--shortstat`     | Zeige nur die Zeile changed/insertions/deletions aus dem --stat-Befehl.
| `--name-only`     | Zeige eine Liste der geänderten Dateien nach der Commit-Beschreibung.
| `--name-status`   | Zeige eine Liste mit Informationen zu added/modified/deleted.
| `--abbrev-commit` | Zeige nur die ersten wenigen Zeichen aus der SHA-1-Prüfsumme statt aller 40.
| `--relative-date` | Zeige das Datum in einem relativen Format (z.B. ``vor 2 Wochen'') statt des vollen Datumsformats.
| `--graph`         | Zeige ein ASCII-Diagramm der Branch- und Merge-Historie.
| `--pretty`        | Zeige Commits in einem alternativen Format. Verfügbare Optionen sind oneline, short, full, fuller und format (bei der man sein eigenes Format spezifizieren kann).
| `--oneline`       | Kurzform für `--pretty=oneline --abbrev-commit`.
|================================

==== Log-Ausgaben filtern

Zusätzlich zu den Optionen zur Ausgabeformatierung kann man `git log` einige sinnvolle Optionen zur Ausgabefilterung übergeben – also Optionen, die lediglich eine Untermenge von Commits anzeigen.
Eine solche Option wurde bereits vorgestellt: die Option `-2`, bei deren Verwendung nur die zwei letzten Commits angezeigt werden.
Genau genommen kann man als Option `-<n>` angeben, wobei `n` eine ganze Zahl ist, um die letzten `n` Commits ausgeben zu lassen.
Im der Regel wird man diese Option weniger häufig gebrauchen, da Git standardmäßig die gesamte Ausgabe mit einem Pager ausgibt, so dass man immer nur eine Seite des Logs angezeigt bekommt.

Allerdings sind Optionen wie `--since` und `--until` zur Eingrenzung des Datums sehr hilfreich.
Der folgende Befehl gibt so zum Beispiel nur die Commits der letzten zwei Wochen aus:

[source,console]
----
$ git log --since=2.weeks
----

Dieser Befehl funktioniert mit vielen Formaten – man kann ein spezifisches Datum angeben wie `"2008-01-15"`, oder ein relatives Datum wie `"2 years 1 day 3 minutes ago"`.

Man kann die Ausgabe ebenso auf Commits begrenzen, die bestimmten Suchkriterien entsprechen.
Die Option `--author` erlaubt es, auf einen bestimmten Autor zu filtern; mit `--grep` kann man nach Schlagwörtern im Commit suchen.

[NOTE]
====
Man kann sowohl `--author` als auch `--grep` mehrfach angeben, was die Ausgabe auf die Commits beschränkt, die _eines_ der Suchkriterien für `--author` und _eines_ der Suchkriterien für `--grep` erfüllen; gibt man allerdings noch die Option `--all-match` an, so müssen _alle_ Suchkriterien der `--grep`-Optionen erfüllt sein.
====

Ein weiterer wirklich hilfreicher Filter ist die Option `-S` (gemeinhin auch als Gits ``Spitzhacken''-Option bekannt), die eine Zeichenkette entgegen nimmt und nur jene Commits ausgibt, in denen sich die Häufigkeit des Auftretens dieser Zeichenkette geändert hat.
Wenn man also zum Beispiel den letzten Commit finden möchte, der eine Referenz auf einen bestimmte Funktion hinzugefügt oder entfernt hat, kann man den folgenden Befehl aufrufen:

[source,console]
----
$ git log -S function_name
----

Zum Schluss sei die Angabe eines Pfads als letzte wirklich nützliche Option genannt, die man `git log` übergeben kann.
Wenn man ein Verzeichnis oder einen Dateinamen übergibt, kann man damit die Log-Ausgaben auf diese beschränken.
Der Pfad wird immer als letzte Option übergeben und ihr werden generell doppelte Bindestriche (`--`) vorangestellt.

In <<limit_options>> werden diese und einige andere häufig verwendeten Optionen als Referenz aufgelistet.

[[limit_options]]
.Optionen, mit denen man die Ausgabe von `git log` filtern kann
[cols="2,4",options="header"]
|================================
| Option                | Beschreibung
| `-<n>`                | Zeige nur die letzten n Commits
| `--since`, `--after`  | Schränke die Ausgabe der Commits auf die ein, die nach dem angegeben Datum erstellt wurden.
| `--until`, `--before` | Schränke die Ausgabe der Commits auf die ein, die vor dem angegeben Datum erstellt wurden.
| `--author`            | Zeige nur die Commits, bei denen der Name des Autors auf die angegebene Zeichenkette passt.
| `--committer`         | Zeige nur die Commits, bei denen der Name des Committers auf die angegebene Zeichenkette passt.
| `--grep`              | Zeige nur die Commits, bei denen die Commit-Beschreibung auf die angegebene Zeichenkette passt.
| `-S`                  | Zeige nur die Commits, die Änderungen hinzugefügt oder entfernt haben, die auf die angegebene Zeichenkette passen.
|================================

Wenn man zum Beispiel aufgelistet bekommen möchte, bei welchen Commits in der Historie des Git-Quellcodes Änderungen an Testdateien von Junio Hamano im Monat Oktober 2008 committet wurden, bei denen es sich nicht um Merge-Commits handelt, kann man etwa den folgenden Befehl ausführen:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Aus fast 40.000 Commits der Git-Quellcode-Historie werden mit Hilfe dieses Befehls lediglich die sechs angezeigt, die die Suchkriterien erfüllen.
