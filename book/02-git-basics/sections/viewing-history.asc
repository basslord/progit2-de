[[_viewing_history]]
=== Die Commit-Historie betrachten

Nachdem man selbst einige Commits getätigt, oder falls man ein Repository mit bereits existierender Commit-Historie geklont hat, möchte man vielleicht einen Blick zurück werfen auf das, was bisher geschah.
Der grundlegendste und mächtigste Befehl, um dies zu tun, ist `git log`.

Die folgenden Beispiele verwenden ein sehr einfaches Projekt namens ``simplegit''.
Um das Projekt zu erhalten, führt man den folgenden Befehl aus:

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

FÜhrt man in diesem Projekt `git log` aus, sollte man eine Ausgabe ähnlich der Folgenden sehen:(((git commands, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Die Standardausgabe des `git log`-Befehls ohne zusätzliche Argumente listet die bisher in diesem Repository erstellten Commits in umgekehrter chronologischer Reihenfolge auf - das bedeutet, dass die neuesten Commits oben stehen.
Wie man sehen kann, wird jeder Commit mit seiner SHA-1-Prüfsumme, dem Namen und der E-Mail-Adresse seines Autors, dem Zeitpunkt seiner Erstellung und seiner Commit-Beschreibung aufgelistet.

Der `git log`-Befehl verfügt über eine riesige Anzahl von vielfältigen Optionen, um genau das anzuzeigen, wonach man sucht.
Im Folgenden werden einige der gebräuchlisten gezeigt.

Eine der nützlicheren Optionen ist `-p`, womit man die mit jedem Commit hinzugekommenen Unterschiede anzeigen lassen kann.
Zusätzlich kann man `-2` als Option setzen, was die Ausgabe auf lediglich zwei Einträge begrenzt:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

Mit dieser Option werden dieselben Einträge angezeigt, doch befindet sich zusätzlich noch ein Diff unmittelbar nach jedem Eintrag.
Das ist sehr nützlich bei einer Code-Überprüfung oder um einen schnellen Überblick darüber zu bekommen, was in einer Reihe von Commits passiert ist, die ein Mitarbeiter hinzugefügt hat.
Weiter verfügt `git log` auch über eine Reihe von zusammenfassenden Optionen.
Wenn man zum Beispiel einige abgekürzte Statistiken sehen möchte, kann man die Option `--stat` benutzen:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Wie man sieht, erzeugt die `--stat`-Option unter jedem Commit-Eintrag eine Liste der geänderten Dateien, wie viele Dateien geändert wurden und wie viele Zeilen in diesen Dateien hinzugefügt und entfernt wurden.
Auch wird eine Zusammenfassung der Informationen am Ende hinzugefügt.

Eine weitere wirklich nützliche Option ist `--pretty`.
Diese Option ändert das standardmäßige Ausgabeformat zu weiteren verfügbaren Formaten.
Es gibt einige vorgefertigte Optionen, die man angeben kann.
Die Option `oneline` listet jeden Commit in einer einzigen Zeile, was hilfreich sein kann, wenn man viele Commits betrachtet.
Ergänzend zeigen die Optionen `short`, `full` und `fuller` die Ausgabe im annähernd gleichen Format, jedoch mit weniger, bzw. mehr Informationen:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

Die interessanteste Option ist `format`, die es dem Nutzer erlaubt, sein eigenes Ausgabeformat zu bestimmen.
Das ist besonders dann hilfreich, wenn man eine Ausgabe erstellen möchte, die maschinenlesbar sein soll - da man das Format explizit festlegt, kann man sicher sein, dass es sich nicht durch Git-Updates verändern wird:(((log formatting)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

In <<pretty_format>> sind einige der nützlichsten Optionen aufgelistet, die `format` entgegen nimmt.

[[pretty_format]]
.Nützliche Optionen für `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Option   | Beschreibung
| `%H`     | Commit-Hash
| `%h`     | Abgekürzter Commit-Hash
| `%T`     | Baum-Hash
| `%t`     | Abgekürzter Baum-Hash
| `%P`     | Eltern-Hashes
| `%p`     | Abgekürzte Eltern-Hashes
| `%an`    | Name des Autors
| `%ae`    | E-Mail-Adresse des Autors
| `%ad`    | Zeitangabe Autor (format akzeptiert die --date=option)
| `%ar`    | Zeitangabe Autor, relativ
| `%cn`    | Name des Committers
| `%ce`    | E-Mail-Adresse des Committers
| `%cd`    | Zeitangabe Committer
| `%cr`    | Zeitangabe Committer, relativ
| `%s`     | Betreff
|================================

Man mag sich fragen, was der Unterschied ist zwischen _Autor_ und _Committer_.
Der Autor ist der eigentliche Urheber einer Änderung, wohingegen der Committer derjenige ist, der die Änderung zuletzt committet hat.
Wenn man also einen Patch an ein Projekt sendet und ein verantwortliches Projektmitglied diesen einpflegt, werden beide Namen genannt - man selbst als der Autor und das Projektmitglied als Committer.
Diese Unterscheidung wird ein wenig genauer in <<_distributed_git>> betrachtet werden.

Die Optionen `oneline` und `format` sind besonders in Verbindung mit einer weiteren `log`-Option besonders nützlich: `--graph`.
Mit dieser Option wird der Ausgabe ein nettes, kleines ASCII-Diagramm hinzugefügt, das die Branch- und Merge-Historie anzeigt:

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Diese Art der Ausgabe wird interessant, sobald die Themen Branching und Merging im folgenden Kapitel behandelt werden.

Dies waren lediglich einige einfache `git log`-Optionen für die Ausgabeformatierung - es gibt viele weitere.
<<log_options>> zeigt zusammen mit jeweils einer Anleitung sowohl die Optionen, die bisher besprochen wurden, als auch einige weitere übliche Formatierungsoptionen, die hilfreich sein könnten.

[[log_options]]
.Common options to `git log`
[cols="1,4",options="header"]
|================================
| Option            | Description
| `-p`              | Show the patch introduced with each commit.
| `--stat`          | Show statistics for files modified in each commit.
| `--shortstat`     | Display only the changed/insertions/deletions line from the --stat command.
| `--name-only`     | Show the list of files modified after the commit information.
| `--name-status`   | Show the list of files affected with added/modified/deleted information as well.
| `--abbrev-commit` | Show only the first few characters of the SHA-1 checksum instead of all 40.
| `--relative-date` | Display the date in a relative format (for example, ``2 weeks ago'') instead of using the full date format.
| `--graph`         | Display an ASCII graph of the branch and merge history beside the log output.
| `--pretty`        | Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
|================================

==== Limiting Log Output

In addition to output-formatting options, `git log` takes a number of useful limiting options – that is, options that let you show only a subset of commits.
You've seen one such option already – the `-2` option, which show only the last two commits.
In fact, you can do `-<n>`, where `n` is any integer to show the last `n` commits.
In reality, you're unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

However, the time-limiting options such as `--since` and `--until` are very useful.
For example, this command gets the list of commits made in the last two weeks:

[source,console]
----
$ git log --since=2.weeks
----

This command works with lots of formats – you can specify a specific date like `"2008-01-15"`, or a relative date such as `"2 years 1 day 3 minutes ago"`.

You can also filter the list to commits that match some search criteria.
The `--author` option allows you to filter on a specific author, and the `--grep` option lets you search for keywords in the commit messages.
(Note that if you want to specify both author and grep options, you have to add `--all-match` or the command will match commits with either.)

Another really helpful filter is the `-S` option which takes a string and only shows the commits that introduced a change to the code that added or removed that string.
For instance, if you wanted to find the last commit that added or removed a reference to a specific function, you could call:

[source,console]
----
$ git log -S function_name
----

The last really useful option to pass to `git log` as a filter is a path.
If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files.
This is always the last option and is generally preceded by double dashes (`--`) to separate the paths from the options.

In <<limit_options>> we'll list these and a few other common options for your reference.

[[limit_options]]
.Options to limit the output of `git log`
[cols="2,4",options="header"]
|================================
| Option                | Description
| `-(n)`                | Show only the last n commits
| `--since`, `--after`  | Limit the commits to those made after the specified date.
| `--until`, `--before` | Limit the commits to those made before the specified date.
| `--author`            | Only show commits in which the author entry matches the specified string.
| `--committer`         | Only show commits in which the committer entry matches the specified string.
| `--grep`              | Only show commits with a commit message containing the string
| `-S`                  | Only show commits adding or removing code matching the string
|================================

For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano in the month of October 2008 and are not merge commits, you can run something like this:(((log filtering)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Of the nearly 40,000 commits in the Git source code history, this command shows the 6 that match those criteria.
