[[_remote_repos]]
=== Mit entfernten Repositorys arbeiten

Um an jedem beliebigen Git-Projekt mitarbeiten zu können, muss man wissen, wie man mit entfernten Repository (kurz: _Remote_) umgeht.
Entfernte Repositorys sind Versionen eines Projekts, die sich im Internet oder an anderer Stelle im Netzwerk befinden.
Man kann mehrere davon haben, auf die im Allgemeinen nur lesend oder schreibend Zugriff hat.
Die Zusammenarbeit mit anderen erfordert die Verwaltung dieser entfernten Repositorys und das Hochladen (Push, von englisch _to push_, schieben) und Herunterladen (Pull, von englisch _to pull_, ziehen) von Daten, wenn man die Arbeit aufteilen muss.
Zur Verwaltung von Remotes muss man wissen, wie man diese hinzufügt, ungültige Remotes entfernt, unterschiedliche entfernte Branches verwaltet und diese als versioniert oder unversioniert definiert, und einiges mehr.
Im aktuellen Abschnitt werden einige dieser zur Verwaltung von entfernten Repositorys benötigten Fähigkeiten besprochen werden.

[NOTE]
.Entfernte Repositorys können auf dem lokalen Rechner sein.
====
Es ist absolut möglich, dass man mit einem ``Remote''-Repository arbeitet, dass sich faktisch auf dem selben Rechner wie man selbst befindet.
Der Begriff ``Remote'' impliziert nicht notwendigerweise, dass das Repository anderswo im Netzwerk oder dem Internet befindet, sondern nur, dass es sich woanders befindet.
Mit einem solchen entfernten Repository zu arbeiten, schließt weiterhin alle Standardoperationen wie Pushen, Pullen und Fetchen mit ein, wie mit jedem anderen Remote.
====

==== Entfernte Repositorys anzeigen

Um zu sehen, welche entfernten Server man eingerichtet hat, kann man den Befehl `git remote` ausführen.(((git commands, remote)))
Er listet die Kurznamen aller entfernten Repositorys auf.
Wenn man sein Repository geklont hat, sollte wenigstens `origin` angezeigt werden – das ist der standardmäßig von Git vergebene Name für den Server, von dem man geklont hat:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Mit der Option `-v` werden zusätzlich die URLs angezeigt, die Git für den angegebenen Kurznamen verwendet, um sich lesend und schreibend auf dieses Remote zu verbinden.

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Sollte man mehr als ein entferntes Repository verwenden, listet der Befehl alle auf.
Ein Repository mit vielen Remotes für die Zusammenarbeit mit verschiedenen Mitarbeitern könnte wie folgt aussehen.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Man kann sich damit Beiträge von jedem dieser Benutzer ziemlich einfach ziehen.
Zusätzlich könnte man die Berechtigung besitzen, zu einem von diesen pushen zu dürfen; dies erkennt man an dieser Ausgabe jedoch nicht.

Wie man in der Ausgabe sieht, verwenden diese entfernten Repositorys unterschiedliche Protokolle; darauf wird in <<_git_on_the_server>> näher eingegangen.

==== Entfernte Repositorys hinzufügen

Es wurde bereits erwähnt und gezeigt, wie der `git clone`-Befehl implizit das entfernte Repository `origin` hinzufügt.
Als Nächstes wird ein entferntes Repository explizit hinzugefügt.(((git commands, remote)))
Um ein neues entferntes Git-Repository mit einem Kurznamen hinzuzufügen, kann man `git remote add <kurzname> <url>` ausführen:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Damit kann man zukünftig `pb` statt der vollständigen URL in der Kommandozeile angeben.
Möchte man zum Beispiel alle Informationen abrufen, die Paul in seinem Repository hat, aber man selbst noch nicht, kann man `git fetch pb` ausführen:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Der Master-Branch von Paul ist nun lokal als `pb/master` verfügbar – man kann diesen nun in einen seiner eigenen Branches ``mergen'' (von englisch _to merge_, verschmelzen, vereinigen, zusammenführen), oder man kann ab diesem Zeitpunkt einen lokalen Branch davon abzweigen, um ihn zu untersuchen.
(Was Branches genau sind und wie man sie benutzt wird in <<_git_branching>> noch detaillierter besprochen werden.)

[[_fetching_and_pulling]]
==== Änderungen mittels fetch und pull aus entfernten Repositorys herunterladen

Wie man gerade gesehen hat, kann man den folgenden Befehl ausführen, um Daten aus entfernten Repositorys zu erhalten:(((git commands, fetch)))

[source,console]
----
$ git fetch <remote>
----

Er sorgt dafür, dass man sich mit dem entfernten Projekt verbindet und alle Daten aus diesem herunterlädt, die man noch nicht zur Verfügung hat.
Nachdem man dies getan hat, sollte man über Referenzen auf alle Branches dieses Remotes verfügen, in die man mergen, oder die man jederzeit untersuchen kann.

Wenn man ein Repository klont, fügt dieser Befehl das Remote automatisch unter dem Namen ``origin'' hinzu.
Dies bedeutet, `git fetch origin` lädt jegliche Neuigkeit herunter, die auf diesen Server hochgeladen wurde, seitdem man das Repository geklont (oder etwas daraus herunterladen) hat.
Es wichtig, zu wissen, dass `git fetch` die Daten lediglich in das lokale Repository herunterlädt – es wird dadurch weder automatisch ein Merge in seine lokalen Daten durchgeführt, noch eine Änderung an den Daten vorgenommen, an denen man gerade arbeitet.
Man muss den Merge selbst manuell ausführen, wenn man dies möchte.

Falls der aktuelle Branch so eingerichtet ist, einem entfernten Branch zu folgen (siehe folgenden Abschnitt und <<_git_branching>> für weitere Informationen), kann man den Befehl `git pull` ausführen, um diesen entfernten Branch gleichzeitig herunterzuladen und diesen dann mit dem aktuellen Branch zusammenzufügen (zu mergen).(((git commands, pull)))
Dies kann ein einfacherer und komfortablerer Workflow sein; standardmäßig wird der Befehl `git clone` den lokalen Master-Branch so einrichten, dass er dem entfernten Master-Branch (oder wie der standardmäßige Branch auch immer heißen mag) des Servers, von dem man geklont hat, folgt.
Im Allgemeinen lädt der Befehl `git pull` Daten von dem Server herunter, von dem man ursprünglich geklont hat, und versucht automatisch, diese mit den Daten zusammenzufügen, an denen man gerade arbeitet.

[[_pushing_remotes]]
==== Änderungen in ein entferntes Repository hochladen

Sobald ein Projekt soweit ist, dass man es teilen möchte, muss man es auf den entfernten Server hochladen.
Der dazu benötigte Befehl ist simpel: `git push <remote> <branch>`.(((git commands, push)))
Möchte man seinen Master-Branch zu seinem `origin`-Server hochladen (noch einmal zu Erinnerung: durch das Klonen wurden diese beiden Namen automatisch gesetzt), dann führt man den folgenden Befehl aus, um alle seine bisherigen Commits wider auf den Server hochzuladen:

[source,console]
----
$ git push origin master
----

Dieser Befehl funktioniert nur dann, wenn man von einem Server geklont hat, auf dem man schreibend zugreifen kann und falls niemand in der Zwischenzeit etwas hochgeladen hat.
Falls außer einem selbst auch andere das Repository geklont hatten und diese ihre Änderungen nun zuerst hochladen, wird der eigene Versuch richtigerweise abgelehnt werden.
Man muss zunächst deren Änderungen herunterladen und diese in die eigenen einarbeiten, bevor man hochladen darf.
Siehe dazu <<_git_branching>> für weitergehende Informationen, wie man etwas auf entfernte Server hochladen kann.

[[_inspecting_remote]]
==== Ein entferntes Repository untersuchen

Möchte man sich weitere Informationen über ein bestimmtes Remote anzeigen lassen, kann man dazu den Befehl `git remote show <remote>` nutzen.(((git commands, remote)))
Führt man diesen Befehl mit einem bestimmten Kurznamen (wie z.B. `origin`) aus, erhält man eine Ausgabe ähnlich der Folgenden:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Es werden die URL des entfernten Repositorys, sowie Informationen zum gefolgten Branch angezeigt.
Der Befehl gibt praktischerweise auch aus, dass man – nachdem man alle entfernten Referenzen heruntergeladen hat – automatisch in den Master-Branch des entfernten Repositorys mergt, falls man sich auf dem Master-Branch befindet und von dort `git pull` ausführt.
Die Ausgabe zeigt außerdem alle entfernten Referenzen an, die für `git push` konfiguriert sind.

Dies ist nur ein einfaches Beispiel, das einem begegnen kann.
Nutzt man Git dagegen ausgiebiger, kann man auch etwas Ähnliches wie im folgenden Beispiel sehen, nachdem man `git show remote` aufgerufen hat:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Bei dieser Ausgabe erkennt man den jeweiligen entfernten Branch, zu dem automatisch gepusht wird, ruft man `git push` vom entsprechenden lokalen Branch auf.
Auch sieht man, über welche entfernte Branches man noch nicht verfügt, über welche man verfügt, die aber bereits vom Server entfernt wurden, und eine Vielzahl lokaler Branches, die man mittels `git pull` automatisch mit ihren entfernten Gegenstücken mergen kann.

==== Entfernte Repositorys umbenennen und entfernen

Man kann `git remote rename` ausführen, um den Kurznamen eines Remotes zu ändern.(((git commands, remote)))
Möchte man zum Beispiel `pb` in `paul` umbenennen, kann man dies mit `git remote rename` wie folgt erledigen:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Es soll an dieser Stelle nicht unerwähnt bleiben, dass dies auch alle entfernten Branches umbenennt.
Was vorher unter `pb/master` zu finden war, befindet sich nun unter `paul/master`.

Möchte man ein Remote aus irgendeinem Grund entfernen – sei es, weil der Server umgezogen wurde, oder weil man einen bestimmten Spiegelserver nicht länger nutzen will, oder weil ein Mitwirkender nicht weiter am Projekt mitarbeitet -, so kann man entweder `git remote remove` oder `git remote rm` ausführen:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----

Hat man erst einmal die Referenz auf ein Remote auf diese Art und Weise gelöscht, so sind auch alle entfernten Entwicklungszweige und die mit diesem Remote verbundenen Konfigurationseinstellungen gelöscht.
