[[_git_tagging]]
=== Tagging

(((tags)))
Wie die meisten Versionsverwaltungssysteme verfügt auch Git über die Möglichkeit, bestimmte Zeitpunkte in der Historie als wichtig zu markieren (englisch _to tag_).
Typischerweise verwenden die meisten diese Funktionalität, um Releases zu markieren (v1.0 usw.).
In diesem Abschnitt wird erklärt, wie man verfügbare Tags anzeigen, wie man neue Tags anlegen, und welche unterschiedlichen Arten von Tags es gibt.

==== Tags anzeigen

Die verfügbaren Tags in Git ausgeben zu lassen ist unkompliziert.
Man führt einfach `git tag` (optional mit `-l` oder `--list`) aus:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

Die Ausgabe dieses Befehls listet die Tags in alphabetischer Reihenfolge auf; die Reihenfolge, in der sie erscheinen, hat keine wirkliche Relevanz.

Man kann auch nach Tags suchen, die auf ein bestimmtes Muster passen.
Das Repository des Git-Quellcodes zum Beispiel enthält mehr als 500 Tags.
Möchte man sich nur diejenigen Tags der 1.8.5er-Reihe anzeigen lassen, kann man den folgenden Befehl ausführen:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

[NOTE]
.Das Anzeigen von Tag-Wildcards benötigt `-l` or `--list` als Option
====
Möchten Sie lediglich die gesamte Liste der Tags ausgeben, nimmt der Befehl `git tag` implizit an, dass Sie eine Listenausgabe wünschen und gibt eine aus; der Gebrauch von `-l` oder `--list` ist in diesem Fall optional.

Möchten Sie jedoch ein Wildcard-Muster angeben, dass auf Tag-Namen passt, ist `-l` oder `--list` zwingend notwendig.
====

==== Tags erstellen

Git unterstützt zwei Arten von Tags: einfache (lightweight) und kommentierte (annotated).

Ein einfaches Tag kann man wie einen Branch sehen, der sich nicht ändert – es ist lediglich ein Zeiger auf einen bestimmten Commit.

Kommentierte Tags jedoch sind vollwertige Objekte, die in der Git-Datenbank gespeichert werden.
Sie besitzen eine Checksumme, enthalten den Namen und die E-Mail-Adresse des Tag-Erzeugers, das jeweilige Datum und einen Tag-Kommentar. Auch können sie zusätzlich mit GNU Privacy Guard (GPG) signiert und verifiziert werden.
Daher ist es durchaus sinnvoll, stets kommentierte Tags anzulegen, damit man all diese Informationen zur Verfügung hat; falls man jedoch nur ein vorübergehendes Tag erzeugen möchte, oder aus irgendwelchen Gründen auf die weiteren Informationen verzichten möchte, kann man ebenso einfache Tags verwenden.

[[_annotated_tags]]
==== Kommentierte Tags

(((tags, annotated)))
Ein kommentiertes Tag zu erzeugen, ist einfach.
Am einfachsten gibt man die Option `-a` beim `tag`-Befehl an:(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

Mit der Option `-m` übergibt man den Tag-Kommentar, der zusammen mit dem Tag gespeichert wird.
Gibt man keinen Kommentar an, öffnet Git den eingestellten Editor, so dass man diesen eingeben kann.

Führt man nun `git show` aus, erhält zusätzlich zu den Informationen über den Commit, der getaggt wurde, eine Ausgabe der Tag-Informationen:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Dies gibt zunächst die Angaben zum Ersteller des Tags aus – das Datum, an dem der Commit getaggt wurde und den Tag-Kommentar.

==== Einfache Tags

(((tags, lightweight)))
Einfache Tags sind eine weitere Methode, mit der man Commits taggen kann.
Dabei wird im Wesentlichen die Commit-Prüfsumme in einer Datei gespeichert – darüber hinaus keinerlei weiteren Informationen.
Um ein einfaches Tag zu erzeugen, lässt jede der Optionen `-a`, `-s` und `-m` weg und gibt schlicht einen Tag-Namen an:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

Übergibt man `git show` nun dieses Tag, sieht man keine weiteren Informationen zu diesem Tag(((git commands, show)))
Die Ausgabe zeigt lediglich den Commit an:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Nachträgliches Taggen

Man kann Tags auch nachträglich erstellen.
Angenommen, die Commit-Historie sieht wie folgt aus:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Weiter angenommen, man hat vergessen, das Projekt als Version v1.2 zu taggen, die es beim Commit ``updated rakefile'' erreicht hatte.
Dann kann man dieses Tag nachträglich hinzufügen.
Um diesen Commit zu taggen, gibt man die Commit-Prüfsumme (oder einen Teil davon) am Ende des Befehls an:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

Man kann nun sehen, dass man den Commit getaggt hat:(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Tags veröffentlichen

Standardmäßig überträgt der `git push`-Befehl keine Tags zum entfernten Server.(((git commands, push)))
Man muss Tags explizit auf einen entfernten Server pushen, nachdem man diese erzeugt hat.
Dieser Vorgang entspricht dem Veröffentlichen von entfernten Branches – man führt den Befehl `git push origin <tagname>` aus.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Falls man viele Tags hat, die man gleichzeitig hochladen möchte, kann man auch die Option `--tags` mit dem Befehl `git push` verwenden.
Dadurch werden alle vorhandenen Tags auf den entfernten Server gepusht, die sich noch nicht dort befinden.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Wenn nun andere dieses Repository klonen oder Daten via `git pull` von dort  herunterladen, erhalten sie ebenfalls alle vorhandenen Tags.

==== Ein Tag auschecken

Möchte man Dateien einer bestimmten Version betrachten, auf die ein Tag zeigt, kann man `git checkout` ausführen (dies versetzt das lokale Repository jedoch in einen sogenannten ``detached HEAD''-Zustand, der einige üble Seiteneffekte besitzt):

[source,console]
----
$ git checkout 2.0.0
Note: checking out '2.0.0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b <new-branch>

HEAD is now at 99ada87... Merge pull request #89 from schacon/appendix-final

$ git checkout 2.0-beta-0.1
Previous HEAD position was 99ada87... Merge pull request #89 from schacon/appendix-final
HEAD is now at df3f601... add atlas.json and cover image
----

Führt man im Zustand von ``detached HEAD'' Änderungen durch und committet diese anschließend, wird das Tag unverändert bleiben und der Commit zu keinem Branch gehören; das bedeutet, dass der Commit außer durch den genauen Hash des Commits nicht erreichbar ist. Man muss also, falls man Änderungen vornehmen möchte – wie etwa einen Bugfix für eine ältere Version – zunächst einen Branch erzeugen:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

Erzeugt man auf diesem Branch einen Commit, so wird sich der Entwicklungszweig `version2` leicht von `v2.0.0` unterscheiden, da er mit den durchgeführten Änderungen weitergeführt wird. Man sollte also wissen, was man tut.
