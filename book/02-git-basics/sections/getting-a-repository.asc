[[_getting_a_repo]]
=== Ein Git-Repository anlegen

Es gibt hauptsächlich zwei Möglichkeiten ein Git-Repository anzulegen.
Bei der ersten Möglichkeit importiert man ein existierendes Projekt oder Verzeichnis nach Git.
Die zweite Möglichkeit ist, ein existierendes Repository von einem anderen, als Server dienenden, Rechner zu klonen.

==== Ein existierendes Verzeichnis als Git-Repository initialisieren

Falls man ein Projekt hat, das noch nicht unter einer Versionsverwaltung steht, und man möchte dieses zukünftig mit Git verwalten, muss man in das Verzeichnis des Projekts wechseln. Sollte man das noch nie gemacht haben, sieht dies je nach Betriebssystem etwas unterschiedlich aus:

If you have a project that is currently not under version control and you want to start controlling it with Git, you first need to go to that project's directory. If you've never done this, it looks a little different depending on which system you're running:

Unter Linux:
[source,console]
----
$ cd /home/user/my_project
----
Unter Mac:
[source,console]
----
$ cd /Users/user/my_project
----
Unter Windows:
[source,console]
----
$ cd /c/user/my_project
----

Dort führt man folgenden Befehl aus:

[source,console]
----
$ git init
----

Damit erzeugt man ein neues Unterverzeichnis namens `.git`, welches alle notwendigen Repository-Dateien enthält – ein Git-Repository-Gerüst (Skeleton).
Zu diesem Zeitpunkt wird noch nichts in dem Projekt verfolgt (getrackt).
(Siehe <<_git_internals>> für weitere Informationen darüber, welche Dateien genau im `.git` enthalten sind, das man soeben erzeugt hat.)(((git commands, init)))

Will man damit beginnen, bereits existierende Dateien unter eine Versionsverwaltung zu stellen, sollte man damit beginnen, diese Dateien zu zu verfolgen (zu tracken) und einen initialen Commit erstellen.
Dies erreicht man mit einigen wenigen `git add`-Befehlen, mit denen man die zu trackenden Dateien spezifiziert und schließt es mit einem `git commit`-Befehl ab:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Wir werden gleich dazu kommen, was diese Befehle genau tun.
Zu diesem Zeitpunkt hat man ein Git-Repository mit getrackten Dateien und einem initialen Commit.

[[_git_cloning]]
==== Ein existierendes Git-Repository klonen

Möchte man eine Kopie eines bereits existierenden Git-Repositorys erhalten – zum Beispiel ein Projekt, zu dem man beitragen möchte – heißt der benötigte Befehl `git clone`.
Falls man mit anderen Versionsverwaltungssystem, wie z.B. Subversion, vertraut ist, wird man festgestellt haben, dass der Befehl "clone" lautet und nicht "checkout".
Das ist ein wichtiger Unterschied – statt lediglich eine Arbeitskopie zu erhalten, bekommt man bei Git eine vollwertige Kopie fast aller Daten, die auch der Server hat.
Jede Version einer jeden Datei der gesamten History des Projekts wird standardmäßig heruntergeladen, wenn man den `git clone`-Befehl ausführt.
De facto kann man, sollte z.B. die Festplatte des Servers beschädigt sein, oft nahezu jedes geklonte Repository irgendeines Clients nutzen, um den Server in den Zustand zurückzusetzen, den er hatte, als der Klon erzeugt wurde (mag man auch einige serverseitige Hooks und ähnliches verlieren, so wären doch sämtlichen versionierten Daten vorhanden – siehe dazu <<_git_on_the_server>> für weitere Details).

Man klont ein Repository mit `git clone <url>`.(((git commands, clone)))
Zum Beispiel würde man Gits `libgit2` genannte linkbare Bibliothek wie folgt klonen:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Dies erzeugt ein Verzeichnis namens `libgit2`, initialisiert ein `.git`-Verzeichnis darin, lädt alle Daten dieses Repositorys herunter, und checkt ein Arbeitsverzeichnis der neuesten Version aus.
Wechselt man in das neue Verzeichnis `libgit2`, liegen dort die Projektdateien zur Bearbeitung oder Nutzung bereit.
Möchte man das Repository in ein anders als `libgit2` bezeichnetes Verzeichnis klonen, kann man dies per Kommandozeilen-Option spezifizieren:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Das Ergebnis dieses Befehls ist das gleiche, wie beim vorangegangen Befehl; doch lautet der Name des Zielverzeichnisses nun `mylibgit`.

Git verfügt über eine Reihe verschiedener Transferprotokolle, die man nutzen kann.
Im obigen Beispiel wurde `https://` als Kommunikationsprotokoll genutzt, doch kann einem auch `git://` oder `user@server:path/to/repo.git` begegnen, wobei Letzteres das SSH-Transferprotokoll nutzt.
In <<_git_on_the_server>> werden alle verfügbaren Optionen mit ihren Vor- und Nachteilen vorgestellt, die der Server anbieten kann, um Zugang zum Git-Repository zu bekommen.
