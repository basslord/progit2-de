=== Änderungen am Repository nachverfolgen

Man verfügt nun über ein funktionierendes Git-Repository und über eine Arbeitskopie der Dateien dieses Projekts.
Nun müssen einige Änderungen vorgenommen und Snapshots dieser Änderungen jedes Mal in das Repository committet werden, wenn das Projekt einen Zustand erreicht hat, den man aufzeichnen möchte.

Wie bereits erwähnt, kann sich jede Datei im Arbeitsverzeichnis in einem von zwei Zuständen befinden: versioniert (englisch _tracked_, wird verfolgt) oder unversioniert (englisch _untracked_, wird nicht verfolgt).
Als versioniert gelten Dateien dann, wenn sie sich im letzten Snapshot befanden; diese Dateien können sich wiederum in den Zuständen unverändert (englisch _unmodified_), geändert (englisch _modified_) oder zum Commit vorgesehen (englisch _staged_) befinden.
Unversionierte Dateien sind alle anderen – Dateien, die sich nicht im letzten Snapshot befanden und die sich nicht in der Staging-Area befinden.
Wenn man ein Repository zum ersten Mal klont, werden alle Dateien versioniert und unverändert sein, da Git sie gerade erst ausgecheckt hat und sie zu dem Zeitpunkt noch nicht geändert wurden.

Nimmt man dann Änderungen an ihnen vor, erkennt Git sie als geändert, da man sie seit dem letzten Commit bearbeitet wurden.
Man staged diese Dateien und committet schließlich die zum Commit vorgesehenen Dateien und der Kreislauf beginnt von Neuem.

.Der Lebenszyklus der Status von Dateien.
image::images/lifecycle.png[Der Lebenszyklus der Status von Dateien.]

[[_checking_status]]
==== Den Zustand von Dateien prüfen

Der wichtigste Befehl, den man nutzt, um herauszufinden, in welchem Status sich Dateien befinden, lautet `git status`.(((git commands, status)))
Führt man diesen Befehl unmittelbar nach dem Klonen eines Repositorys aus, sollte die Ausgabe in etwa wie folgt aussehen:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

Das bedeutet, dass das Arbeitsverzeichnis unverändert (englisch _clean_) ist; es wurden also noch keine der versionierten Dateien verändert.
Ebenso wenig erkannte Git irgendwelche unversionierten Dateien, sonst wären sie hier aufgelistet worden.
Schließlich teilt einem die Ausgabe des Befehls noch mit, auf welchem Entwicklungszweig (englisch _branch_, Zweig) man sich befindet und dass dieser noch nicht vom gleichnamigen Branch auf dem Server divergiert ist, die Inhalte also nicht von denen auf dem Server abweichen.
Der Name des Branches, auf dem man sich befindet, lautet ``master''. Dies ist der Standard und für den Anfang in Ordnung.
In <<_git_branching>> werden Branches und Referenzen näher erläutert werden.

Angenommen, man fügt als neue Datei eine einfache `README`-Datei zum Projekt hinzu und führt den Befehl `git status` aus, dann führt dies zur Auflistung der unversionierten Datei, da diese vorher ja noch nicht existierte:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

Unter der Überschrift ``Untracked files'' taucht nun die neu erstellte `README`-Datei auf.
Unversioniert (englisch _untracked_) meint grundsätzlich, dass Git eine Datei erkannt hat, die sich nicht in einem der bisher erstellten Snapshots (Commit) befand; Git wird diese auch nicht automatisch in die Versionierung aufnehmen, bis man Git explizit dazu auffordert.
Dieses Verhalten sorgt dafür, dass man nicht aus Versehen generierte Binärdateien oder andere Dateien aufnimmt, die man nicht dafür vorgesehen hatte.
Im Beispiel möchte man die `README`-Datei aber hinzufügen, also wird die Datei unter die Versionsverwaltung gestellt.

[[_tracking_files]]
==== Neue Dateien versionieren

Um eine neue Datei zu versionieren, nutzt man das Kommando `git add`.(((git commands, add)))
Für die `README`-Datei im Beispiel heißt dies also, dass man folgenden Befehl ausführt:

[source,console]
----
$ git add README
----

Führt man anschließend erneut den Status-Befehl aus, wird die `README`-Datei als versioniert und für den nächsten Commit vorgesehen (staged) angezeigt:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

Die Datei wird nun unter der Überschrift ``Changes to be committed'' (zum Commit vorgemerkte Änderungen) aufgelistet, was bedeutet, dass sie nun gestaged ist.
Führt man jetzt einen Commit durch, wird die Datei in der Version zur Historie hinzugefügt, die sie nach dem Ausführen von `git add` hatte.
Beim Initialisieren des Git-Repositorys mit `git init` im früheren Beispiel wurde darauf der Befehl `git add <Dateien>` ausgeführt – womit die Dateien zur Versionierung hinzugefügt wurden.(((git commands, init)))(((git commands, add)))
Der Befehl `git add` nimmt eine Pfadangabe entgegen sowohl für eine Datei, als auch für ein Verzeichnis; gibt man ein Verzeichnis an, so fügt der Befehl alle Dateien unterhalb des angegebenen Pfades rekursiv hinzu.

==== Geänderte Dateien zum Commit vormerken (Staging)

Als Nächstes soll eine Datei geändert werden, die bereits versioniert ist.
Ändert man die bereits getrackte Datei `CONTRIBUTING.md` und ruft anschließend erneut `git status` auf, bekommt man das folgende Ergebnis:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Die Datei `CONTRIBUTING.md` erscheint nun im Bereich ``Changes not staged for commit`` (Änderungen, die nicht zum Commit vorgemerkt sind). Das bedeutet, dass eine versionierte Datei im Arbeitsverzeichnis verändert wurde, aber noch nicht gestaged wurde.
Um die Datei zu stagen, führt man den Befehl `git add` aus.
`git add` ist ein Mehrzweck-Befehl – man nutzt ihn, um neue Dateien der Versionsverwaltung hinzuzufügen, Dateien zu stagen, und andere Dinge, wie z.B. einen Merge-Konflikt einer Datei als beseitigt zu erklären.
Es könnte hilfreich sein, den Befehl eher mit ``füge diesen Inhalt dem nächsten Commit hinzu'', als mit ``füge die Datei dem Projekt hinzu'' zu übersetzen.(((git commands, add)))
Nun soll `git add` ausgeführt werden, um die Datei `CONTRIBUTING.md` der Staging-Area hinzuzufügen. Gleich anschließend wird wieder `git status` aufgerufen:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Beide Dateien sind nun für den nächsten Commit vorgesehen.
Angenommen, man möchte genau in diesem Moment eine weitere kleine Änderung an
`CONTRIBUTING.md` vornehmen, bevor man sie committet.
Also öffnet man die Datei, führt die Änderung durch, und ist bereit für den Commit.
Schaut man sich dann die Ausgabe von `git status` noch einmal an, erhält man Folgendes:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Ja, hoppla!
Nun wird `CONTRIBUTING.md` sowohl als staged, als auch unstaged gelistet.
Wie ist das möglich?
Es zeigt sich, dass Git die Datei genau in der Version in die Staging-Area übernimmt, die sie zum Zeitpunkt hatte, als `git add` ausgeführt wurde.
Führt man jetzt den Commit mit `git commit` aus, wird also nur diese Version von `CONTRIBUTING.md` in die Historie übernommen und nicht die Version, die sich nach der Änderung im Arbeitsverzeichnis befindet.
Deshalb muss man `git add` erneut ausführen, um die neueste Version der Datei für den Commit vorzumerken:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

==== Kurze Status-Ausgabe

Die Ausgabe von `git status` ist sehr umfassend und damit auch recht weitschweifig.
Um eine kompaktere Ausgabe zu erhalten, besitzt Git einen Schalter zur Kurzdarstellung der Status-Ausgabe.
Um zu dieser vereinfachten Ausgabe zu gelangen, führt man `git status -s` oder `git status --short` aus:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

Neue unversionierte Dateien sind mit `??`, neue Dateien in der Staging-Area mit `A`, geänderte Dateien mit `M` und so weiter gekennzeichnet.
Die Kennzeichnung ist zweispaltig aufgebaut – die linke Spalte zweigt den Status in der Staging-Area an, die rechte den Status im Arbeitsverzeichnis.
In der obigen Ausgabe wurde also `README` im Arbeitsverzeichnis geändert, befindet sich aber noch nicht in der Staging-Area, wohingegen `lib/simplegit.rb` als geändert und staged gekennzeichnet ist.
`Rakefile` wurde geändert, gestaged und wieder geändert; es gibt also Änderungen, die sowohl gestaged als auch unstaged sind.

[[_ignoring]]
==== Dateien ignorieren

Es kommt häufig vor, dass es Klassen von Dateien im Arbeitsverzeichnis gibt, die man weder automatisch zu Git hinzufügen, noch als nicht versionierte Dateien angezeigt bekommen möchte.
Diese sind oft automatisch erstellte Dateien, wie Logfiles, oder durch ein Build-System erzeugte Dateien.
Für diese Fälle kann man eine Datei `.gitignore` erstellen, die Dateimuster für diese auszuschließenden Dateien enthält.(((ignoring files)))
Hier ist ein Beispiel für eine `.gitignore`-Datei:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

Die erste Zeile teilt Git mit, dass es alle Dateien mit den Endungen ``.o'' or ``.a'' ignorieren soll – Objekt- oder Archivdateien, die bei der Erzeugung von Code durch ein Build-System entstehen können.
Die zweite Zeile weist Git an, alle Dateien auszuschließen, die mit einer Tilde (`~`) enden; solche werden von vielen Texteditoren wie Emacs als temporäre Dateien erstellt.
Man kann auch Verzeichnisse wie log, tmp oder pid, automatisch generierte Dokumentationen, usw. in die Liste übernehmen.
Es ist also grundsätzlich eine gute Idee, eine `.gitignore`-Datei anzulegen, bevor man loslegt, damit man nicht versehentlich Dateien committet, die man wirklich nicht in seinem Git-Repository haben möchte.

Die Regeln für die Muster, die man in der `.gitignore`-Datei verwenden kann, sind wie folgt:

*	Leere Zeilen oder Zeilen, die mit `#` beginnen, werden ignoriert.
*	Standardmäßige `glob`-Muster funktionieren.
*	Man kann ein Muster mit einem Schrägstrich (`/`) abschließen, um ein Verzeichnis zu deklarieren.
*	Man kann ein Muster negieren, indem man ein Ausrufezeichen (`!`) voranstellst.

Glob-Muster sind vereinfachte reguläre Ausdrücke, die von Shells verwendet werden. Ein Stern (`*`) entspricht keinem oder mehreren Zeichen; `[abc]` greift bei einem der in den eckigen Klammern angegebenen Zeichen (in diesem Fall also a, b oder c); ein Fragezeichen (`?`) bezeichnet ein beliebiges, einzelnes Zeichen; und eckige Klammern mit Zeichen, die von einem Bindestrich getrennt werden (`[0-9]`) bezeichnen ein Zeichen aus der angegebenen Menge von Zeichen (in diesem Fall also ein Zeichen zwischen 0 und 9).

Man kann auch zwei Sterne benutzen, um verschachtelte Verzeichnisse zu bezeichnen; `a/**/z` würde also auf `a/z`, `a/b/z`, `a/b/c/z` und so weiter zutreffen.

Ein weiteres Beispiel für eine `.gitignore`-Datei:

[source]
----
# ignoriere alle Dateien, die mit .a enden
*.a

# lib.a wird nicht ignoriert, obwohl andere auf .a endende Dateien durch die obige Regel ausgeschlossen werden
!lib.a

# ignoriere die Datei TODO im aktuellen Verzeichnis, nicht in subdir/TODO
/TODO

# ignoriere alle Dateien im Verzeichnis build/
build/

# ignoriere doc/notes.txt, doch nicht doc/server/arch.txt
doc/*.txt

# ignoriere alle auf .pdf endenden Dateien im Verzeichnis doc/ und in jedem seiner Unterverzeichnisse
doc/**/*.pdf
----

[TIP]
====
GitHub pflegt eine recht umfangreiche Liste von brauchbaren Beispielen für `.gitignore`-Dateien für dutzende Projekte und Sprachen unter https://github.com/github/gitignore[], falls man einen Startpunkt für sein Projekt benötigt.
====

[NOTE]
====
Im einfachsten Fall kann ein Repository eine einzelne `.gitignore`-Datei im Hauptverzeichnis enthalten, die rekursiv auf das gesamte Repository angewendet wird.
Es ist jedoch auch möglich, zusätzliche `.gitignore`-Dateien in Unterverzeichnissen zu speichern.
Die Regeln dieser verschachtelten `.gitignore`-Dateien werden nur auf Dateien angewendet, die sich unterhalb des Verzeichnisses befinden, in welchem sich die jeweilige `.gitignore`-Datei befindet.
(Im Repository des Linux-Quellcodes befinden sich 206 `.gitignore`-Dateien.)

Es geht über den Umfang dieses Buches hinaus, Details zur Verwendung mehrerer `.gitignore`-Dateien zu besprechen; siehe dazu `man gitignore`.
====

[[_git_diff_staged]]
==== Änderungen in und außerhalb der Staging-Area betrachten

Falls einem die Ausgabe des `git status`-Befehls zu vage ist, – man möchte vielleicht wissen, was man geändert hat, nicht nur, welche Dateien geändert wurden – kann man den Befehl `git diff` nutzen.(((git commands, diff)))
Der `git diff`-Befehl wird später noch im Detail genauer betrachtet werden, aber man mag es am häufigsten verwenden, um zwei Fragen zu beantworten: "Was wurde geändert, aber noch nicht gestaged?" und "Was wurde gestaged und damit für den nächsten Commit vorgesehen?"
Obschon `git status` diese Fragen sehr allgemein beantwortet, indem es die Dateinamen ausgibt, zeigt `git diff` exakt die Zeilen, die hinzugefügt und entfernt wurden – es zeigt gewissermaßen einen Patch.

Angenommen, dass die Datei README erneut geändert und gestaged wurde und danach die Datei `CONTRIBUTING.md` geändert wurde, ohne diese zu stagen.
Führt man nun `git status` aus, bekommt man wieder eine Ausgabe wie folgt:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Um zu sehen, was man geändert, aber noch nicht gestaged hat, führt man den Befehl `git diff` ohne weitere Argumente aus:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

Der Befehl vergleicht die Datei aus dem Arbeitsverzeichnis mit der aus der Staging-Area.
Das Ergebnis zeigt die Unterschiede an, die bislang noch nicht gestaged wurden.

Möchte man sehen, was man gestaged hat und was somit für den nächsten Commit vorgemerkt ist, kann man den Befehl `git diff --staged` ausführen.
Er vergleicht die Änderungen in der Staging-Area mit dem letzten Commit:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

Es ist wichtig anzumerken, dass `git diff` selbst nicht alle Änderungen anzeigt, die seit dem letzten Commit durchgeführt wurden – lediglich Änderungen, die noch nicht gestaged wurden.
Das kann etwas verwirrend sein, denn wenn man alle Änderungen gestaged hat, dann wird `git diff` keine Ausgabe erzeugen.

Ein weiteres Beispiel: Staged man `CONTRIBUTING.md` und ändert diese Datei anschließend, kann man `git status` nutzen, um sich die Änderungen zwischen der gestageten und ungestageten Version anzeigen zu lassen.

Das könnte wie folgt aussehen:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status

On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Nun ruft man `git diff` auf, um zu sehen, was bisher unstaged ist:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

und `git diff --cached`, um zu sehen, was bisher bereits gestaged wurde (`--staged` und `--cached` sind Synonyme):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff in einem externen Programm
====
Im weiteren Verlauf des Buchs wird `git diff` auf verschiedene Arten weiter verwendet werden.
Es gibt aber auch die Möglichkeit, sich diese Diffs in einem externen Programm anzusehen, falls man z.B. eine grafische Benutzeroberfläche bevorzugt.
Ruft man den Befehl `git difftool` statt `git diff` auf, so kann man die Diffs in Programmen wie emerge, vimdiff und vielen weiteren (einschließlich kommerziellen Produkten) ansehen.
Rufen Sie `git difftool --tool-help` auf, um zu sehen, was auf Ihrem System zur Verfügung steht.
====

[[_committing_changes]]
==== Einen Commit erstellen

Ist die Staging-Area im gewünschten Zustand, kann man die dort vorgemerkten Änderungen schließlich committen.
Es gilt zu bedenken, dass alle Änderungen, die noch nicht gestaged wurden – neu erstellte Dateien oder Dateien, die seit dem letzten Aufruf von `git add` ein weiteres Mal geändert wurden – werden nicht Teil des Commits sein.
Diese verbleiben als geänderte Dateien auf der Festplatte.
Im aktuellen Beispiel gehen wird also angenommen, dass `git status` alles als gestaged anzeigt und man bereit ist, die Änderungen zu committen.(((git commands, status)))
Der einfachste Weg, dies zu tun, ist den Befehl `git commit` auszuführen:(((git commands, commit)))

[source,console]
----
$ git commit
----

Dies wird den vorausgewählten Texteditor öffnen.
(Dieser wird durch die `EDITOR`-Variable der Shell gesetzt – üblicherweise ist die vim oder emacs; doch man kann auch jeden anderen Editor auswählen, indem man `git config --global core.editor` aufruft, was man bereits im Abschnitt <<_getting_started>> kennengelernt).(((editor, changing default)))(((git commands, config)))

Im Editor erscheint der folgende Text (hier ein Beispiel aus Vim als Texteditor):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

Man sieht hier die standardmäßige Commit-Beschreibung (englisch _commit message_), die identisch ist mit der auskommentierten Ausgabe des `git status`-Befehls und einer Leerzeile zu Beginn der Nachricht.
Man kann diese Kommentare nun entfernen und seine eigene Commit-Beschreibung verfassen, oder man belässt sie so, damit man sich besser an den Inhalt des Commits erinnern kann.
(Um eine ausführlichere Erinnerungshilfe über die Änderungen zu erhalten, kann man den Schalter `-v` an `git commit` übergeben.
Dies sorgt dafür, dass auch die Diff-Ausgabe der Änderungen im Editor erscheint, so dass man eine detaillierte Übersicht über die Änderung erhält.)
Verlässt man den Texteditor, erstellt Git den Commit mit dieser Commit-Beschreibung (wobei Kommentare und Diff-Ausgabe ausgenommen werden).

Als Alternative kann man die Commit-Beschreibung auch direkt in der Kommandozeile angeben, indem man sie hinter den Schalter `-m` schreibt:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Damit hat man seinen ersten Commit erzeugt!
Dieser gibt einem gleich ein wenig Informationen über sich: auf welchem Branch man seinen Commit angelegt hat (`master`), welche SHA-1-Prüfsumme der Commit hat (`463dc4f`), wie viele Dateien geändert wurden, und eine Statistik über die hinzugefügten und entfernten Zeilen im Commit.

Wie man sicher noch weiß, zeichnet der Commit den Snapshot auf, den man in der Staging-Area vorbereitet hat.
Alles, was man nicht gestaged hat, befindet sich als Änderung weiterhin dort; man kann einen weiteren Commit ausführen, um sie zu seiner Historie hinzuzufügen.
Jedes Mal, wenn man einen Commit durchführt, zeichnet man einen Snapshot seines Projekts auf, zu dem man später zurück gehen oder den man mit dem aktuellen Stand vergleichen kann.

==== Überspringen der Staging-Area

(((staging area, skipping)))
Obwohl es erstaunlich nützlich sein kann, seine Commits exakt so anzufertigen, wie man sie sich wünscht, ist die Staging-Area manchmal etwas komplexer, als in seinem Workflow benötigt.
Möchte man daher die Staging-Area überspringen, bietet Git dazu eine Abkürzung.
Fügt man die Option `-a` dem `git commit`-Befehl hinzu, wird Git jede Datei, die bereits versioniert ist, automatisch vor dem Commit stagen. Damit überspringt man den `git add`-Teil:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

In diesem Fall musste man vor dem Commit für die Datei `CONTRIBUTING.md` kein `git add` ausführen, da die Option `-a` alle geänderten Dateien einschließt.
Das ist praktisch, aber es gilt zu beachten, dass man mit Übergabe dieser Option manchmal auch unerwünschte Änderungen einschließt.

[[_removing_files]]
==== Dateien entfernen

(((files, removing)))
Um Dateien aus Git zu entfernen, muss man sie aus seinen versionierten Dateien entfernen (oder genauer: man muss sie aus der Staging-Area entfernen) und anschließend committen.
Dafür sorgt der Befehl `git rm`, der die Datei ebenfalls aus dem Arbeitsverzeichnis entfernt, damit man sie zukünftig auch nicht als unversionierte Datei angezeigt bekommt.

Entfernt man die Datei einfach aus seinem Arbeitsverzeichnis, wird sie in der `git status`-Ausgabe weiterhin in der Kategorie ``Änderungen, die nicht zum Commit vorgemerkt sind'' angezeigt werden (also im Bereich für Dateien im Status _unstaged_):

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Führt man dann `git rm` aus, wird die Entfernung der Datei gestaged.

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md

----

Beim nächsten Commit wird die Datei entfernt sein und auch nicht weiter getrackt werden.
Sollte die Datei bereits geändert und zur Staging-Area hinzugefügt worden sein, muss das Löschen mit der Option `-f` erzwungen werden.
Dieses Sicherheitsmerkmal verhindert das versehentliche Löschen von Dateien, die noch in keinem Snapshot enthalten sind und die nicht aus Git wiederhergestellt werden können.

Weiter kann es auch nützlich sein, die Datei im Arbeitsverzeichnis zu behalten, sie jedoch aus der Staging-Area zu entfernen.
Mit anderen Worten: man möchte die Datei auf der Festplatte behalten, aber sie soll nicht länger von Git verwaltet werden.
Dies kann dann besonders nützlich sein, wenn man vergessen hat, etwas zu seiner `.gitignore`-Datei hinzuzufügen und es versehentlich gestaged hat, wie z.B. eine große Logdatei oder einen Haufen kompilierter `.a`-Dateien.
Um dies zu tun, ergänzt man den Befehl um die Option `--cached`:

[source,console]
----
$ git rm --cached README
----

Man kann dem `git rm`-Befehl Dateien, Verzeichnisse und Datei-Glob-Muster übergeben.
Man kann also etwas wie das Folgende tun:

[source,console]
----
$ git rm log/\*.log
----

Man beachte den Backslash (`\`) vor dem `*`.
Dieser ist notwendig, da Git der Dateinamen-Expansion der Shell noch seine eigene hinzufügt.
Der genannte Befehl entfernt alle Dateien, die eine `.log`-Dateinamenserweiterung im `log/`-Verzeichnis haben.
Oder man etwas wie das Folgende tun:

[source,console]
----
$ git rm \*~
----

Dieser Befehl entfernt alle Dateien, die auf `~` enden.

[[_git_mv]]
==== Dateien verschieben

(((files, moving)))
Anders als andere Versionsverwaltungssysteme verfolgt Git nicht explizit, wenn Dateien verschoben werden.
Benennt man eine Datei in Git um, werden keine Metadaten gespeichert, die Git mitteilen, dass die Datei umbenannt wurde.
Allerdings ist Git ziemlich gut darin, es nachträglich herauszufinden – das Verschieben von Dateien wird später noch näher betrachtet werden.

Es ist daher etwas verwirrend, dass Git einen `mv`-Befehl kennt.
Möchte man eine Datei in Git umbenennen, führt man diesen wie folgt aus:

[source,console]
----
$ git mv datei_alter_name datei_neuer_name
----

Das funktioniert ausgezeichnet.
Tatsächlich kann man der Status-Ausgabe entnehmen, dass Git die Datei als umbenannt betrachtet:

[source,console]
----
$ git mv README README.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README -> README.md

----

Diese Vorgehensweise ist äquivalent zum folgenden Befehl:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Git erkennt implizit, dass es sich um eine Umbenennung handelt. Damit macht es keinen Unterschied, ob man eine Datei auf diese Art umbenennt, oder mit dem `mv`-Befehl.
Der einzige wirkliche Unterschied besteht darin, dass man mit `git mv` lediglich einen Befehl und nicht drei ausführen muss – es ist eine Komfort-Funktion.
Wichtig ist nur zu wissen, dass man Dateien auf jede mögliche Art und Weise umbenennen und sie danach mit `git add` und `git rm` weiter in Git bearbeiten kann, bevor man sie committet.
