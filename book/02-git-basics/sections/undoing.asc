[[_undoing]]
=== Änderungen rückgängig machen

Es kann jederzeit vorkommen, dass man etwas rückgängig machen möchte.
Im Folgenden werden einige grundlegende Möglichkeiten vorgestellt, wie man seine Änderungen rückgängig machen kann.
Dabei sollte man jedoch durchaus vorsichtig sein, denn man kann nicht immer alles wiederherstellen, was man erst einmal rückgängig gemacht hat.
In Git sind dies die seltenen Umstände, unter denen man Daten verlieren kann, falls man etwas falsch macht.

Zu frühes Committen, bei dem man möglicherweise vergessen hat, einige Dateien hinzuzufügen, sind neben vermurksten Commit-Beschreibungen sehr häufige Gründe dafür, dass man etwas rückgängig machen möchte.
Falls man den letzten Commit erneut ausführen möchte, kann man dies mit der Option `--amend` tun:

[source,console]
----
$ git commit --amend
----

Dieser Befehl nimmt die Staging-Area als Grundlage für den Commit.
Falls seit dem letzten Commit keine Änderungen durchgeführt wurden (wenn man diesen Befehl also zum Beispiel gleich nach dem vorangegangenen Commit ausführt), dann wird der Snapshot sich nicht verändert haben und alles, was man ändert, ist die Commit-Beschreibung.

Es wird wieder der Texteditor geöffnet, doch enthält dieser bereits die Commit-Beschreibung des letzten Commits.
Man kann dann die Beschreibung wie üblich ändern, doch wird dabei der vorangegangene Commit überschrieben.

Angenommen, man erstellt einen Commit und stellt dann fest, dass man vergessen hat, die Änderungen einer Datei zu stagen, die man zu diesem Commit hätte hinzufügen wollen, dann kann man Folgendes tun:

[source,console]
----
$ git commit -m 'initial commit'
$ git add vergessene_datei
$ git commit --amend
----

Das Ergebnis ist ein einzelner Commit - der zweite Commit ersetzt die Ergebnisse des vorangegangenen.

[[_unstaging]]
==== Eine Datei aus der Staging-Area entfernen

Die nächsten beiden Abschnitte demonstrieren den Umgang mit Änderungen in der Staging-Area und dem Arbeitsverzeichnis.
Das Schöne daran ist, dass einen der Befehl zur Ermittlung des Status dieser beiden Bereiche gleichzeitig darauf hinweist, wie man Änderungen an ihnen zurücknehmen kann.
Zum Beispiel hat man zwei Dateien geändert und möchte diese in zwei separaten Commits hinzufügen, hat aber versehentlich `git add *` ausgeführt sie beide damit gestaged.
Wie kann man nun einen der beiden aus der Staging-Area entfernen?
Der `git status`-Befehl erinnert einen:

[source,console]
----
$ git add *
$ git status
Auf Branch master
zum Commit vorgemerkte Änderungen:
  (benutzen Sie "git reset HEAD <Datei>..." zum Entfernen aus der Staging-Area)


  	geändert:       CONTRIBUTING.md
  	umbenannt:      README -> README.md

----

Gleich unter der Überschrift ``zum Commit vorgemerkte Änderungen'' steht der Hinweis, man solle `git reset HEAD <Datei>...` zum Entfernen aus der Staging-Area benutzen.

Diesen Ratschlag kann man nun zum Entfernen der Datei `CONTRIBUTING.md` aus der Staging-Area verwenden:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Nicht zum Commit vorgemerkte Änderungen nach Zurücksetzung:
M	CONTRIBUTING.md
$ git status
Auf Branch master
zum Commit vorgemerkte Änderungen:
  (benutzen Sie "git reset HEAD <Datei>..." zum Entfernen aus der Staging-Area)

	umbenannt:      README -> README.md

Änderungen, die nicht zum Commit vorgemerkt sind:
  (benutzen Sie "git add <Datei>...", um die Änderungen zum Commit vorzumerken)
  (benutzen Sie "git checkout -- <Datei>...", um die Änderungen im Arbeitsverzeichnis zu verwerfen)

	geändert:       CONTRIBUTING.md

----

Der Befehl mag etwas seltsam anmuten, aber er funktioniert.
Die Datei `CONTRIBUTING.md` ist immer noch geändert, aber wieder unstaged.

[NOTE]
=====
Es stimmt, dass `git reset` ein gefährlicher Befehl sein kann; besonders, wenn man den Schalter `--hard` benutzt.
Im Szenario von oben wird die Datei im Arbeitsverzeichnis jedoch nicht angefasst, damit ist es relativ sicher.
=====

Für den Moment ist dieser magische Aufruf alles, was man über den `git reset`-Befehl wissenn muss.
In <<_git_reset>> wird viel ausführlicher erklärt werden, was `reset` tut und wie man es zu meistern lernt, um wirklich interessante Dinge zu tun.

==== Änderungen an einer geänderten Datei verwerfen

Was, wenn man feststellt, dass man die Änderungen an `CONTRIBUTING.md` nicht behalten möchte?
Wie kann man die Änderungen bequem verwerfen - die Datei in den Zustand zurückversetzen, den sie beim letzten Commit hatte (oder nach dem ersten Klonen, oder wie auch immer sie ursprünglich ins Arbeitsverzeichnis gelangt ist)?
Glücklicherweise sagt einem `git status` da auch.
In der Ausgabe des letzten Beispiels sah der nicht gestagete Bereich so aus:

[source,console]
----
Änderungen, die nicht zum Commit vorgemerkt sind:
  (benutzen Sie "git add <Datei>...", um die Änderungen zum Commit vorzumerken)
  (benutzen Sie "git checkout -- <Datei>...", um die Änderungen im Arbeitsverzeichnis zu verwerfen)

	geändert:       CONTRIBUTING.md

----

Es sagt einem ziemlich ausdrücklich, wie man die Änderungen verwerfen kann, die man vorgenommen hat.
Also kann man tun, was einem geraten wurde:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
Auf Branch master
zum Commit vorgemerkte Änderungen:
  (benutzen Sie "git reset HEAD <Datei>..." zum Entfernen aus der Staging-Area)

	umbenannt:      README -> README.md

----

Man sieht, dass die Änderungen rückgängig gemacht wurden.

[IMPORTANT]
=====
Es ist wichtig zu wissen, dass `git checkout -- <Datei>` ein gefährlicher Befehl ist.
Jede Änderung, die man an der Datei vorgenommen hat, ist nun verloren - Git hat sie gerade mit einer anderen Datei überschrieben.
Nutzen Sie den Befehl niemals, bevor Sie nicht absolut sicher sind, dass sie die Datei nicht benötigen.
=====

Möchte man die an der Datei vorgenommenen Änderungen behalten, sie aber vorübergehend ausblenden, sind im Abschnitt <<_git_branching>> mit Stashing und Branching geeignetere Vorgehensweisen zu diesem Zweck beschrieben.

Wie bereits erwähnt, kann man fast alles wiederherstellen, das in Git _committed_ wurde.
Sogar Commits, die sich auf gelöschten Branches befanden, oder Commits, die durch einen `--amend`-Commit überschrieben wurden, können wiederhergestellt werden (siehe auch <<_data_recovery>> zum Thema Datenrettung).
Allerdings wird man verloren gegangene Änderungen, die niemals committet wurden, wahrscheinlich niemals wiederherstellen können.
